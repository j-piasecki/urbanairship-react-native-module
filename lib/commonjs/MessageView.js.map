{"version":3,"names":["MessageLoadError","MessageView","React","Component","event","props","onLoadStarted","nativeEvent","onLoadFinished","onLoadError","onClose","render","_onLoadError","_onLoadStarted","_onLoadFinished","_onClose"],"sources":["MessageView.tsx"],"sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\nimport React from \"react\";\nimport { NativeSyntheticEvent } from \"react-native\";\nimport UARCTMessageView from \"./MessageViewNativeComponent\";\n\ninterface UARCTMessageViewProps {\n  messageId: string;\n  onLoadStarted: (event: NativeSyntheticEvent<MessageLoadStartedEvent>) => void;\n  onLoadFinished: (event: NativeSyntheticEvent<MessageLoadFinishedEvent>) => void;\n  onLoadError: (event: NativeSyntheticEvent<MessageLoadErrorEvent>) => void;\n  onClose: (event: NativeSyntheticEvent<MessageClosedEvent>) => void;\n}\n\n/**\n * Enum of possible message load errors\n */\nexport enum MessageLoadError {\n  /**\n   * The message is not available.\n   */\n  NotAvailable = \"MESSAGE_NOT_AVAILABLE\",\n  /**\n   * Failed to fetch the message.\n   */\n  FetchFailed = \"FAILED_TO_FETCH_MESSAGE\",\n  /**\n   * Failed to load the message.\n   */\n  LoadFailed = \"MESSAGE_LOAD_FAILED\"\n}\n\n/**\n * Message load started event.\n */\nexport interface MessageLoadStartedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * Message load finished event.\n */\nexport interface MessageLoadFinishedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * Message load error event.\n */\nexport interface MessageLoadErrorEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n  /**\n   * Whether the failure is retryable.\n   */\n  retryable: boolean\n  /**\n   * The error\n   */\n  error: MessageLoadError\n}\n\n/**\n * Message closed event\n */\nexport interface MessageClosedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * MessageView props\n */\nexport interface MessageViewProps  {\n  /**\n   * A callback when the view starts loading a message.\n   *\n   * @param event: The message load started event.\n   */\n  onLoadStarted: (event: MessageLoadStartedEvent) => void;\n  /**\n   * A callback when the view finishes loading a message.\n   *\n   * @param event: The message load finished event.\n   */\n  onLoadFinished: (event: MessageLoadFinishedEvent) => void;\n  /**\n   * A callback when the view fails to load a message with an error.\n   *\n   * @param event: The message load error event.\n   */\n  onLoadError: (event: MessageLoadErrorEvent) => void;\n  /**\n   * A callback when the message is closed.\n   *\n   * @param event: The message closed event.\n   */\n  onClose: (event: MessageClosedEvent) => void;\n\n  /**\n   * The message Id.\n   */\n  messageId: string;\n}\n\n/**\n * Inbox message view component.\n */\nexport class MessageView extends React.Component<MessageViewProps> {\n\n  _onLoadStarted = (event: NativeSyntheticEvent<MessageLoadStartedEvent>) => {\n    if (!this.props.onLoadStarted) {\n      return;\n    }\n    this.props.onLoadStarted(event.nativeEvent);\n  };\n\n  _onLoadFinished = (event: NativeSyntheticEvent<MessageLoadFinishedEvent>) => {\n    if (!this.props.onLoadFinished) {\n      return;\n    }\n    this.props.onLoadFinished(event.nativeEvent);\n  };\n\n  _onLoadError = (event: NativeSyntheticEvent<MessageLoadErrorEvent>) => {\n    if (!this.props.onLoadError) {\n      return;\n    }\n    this.props.onLoadError(event.nativeEvent);\n  };\n\n  _onClose = (event: NativeSyntheticEvent<MessageClosedEvent>) => {\n    if (!this.props.onClose) {\n      return;\n    }\n    this.props.onClose(event.nativeEvent);\n  };\n\n  render() {\n    return <UARCTMessageView {...this.props} onLoadError={this._onLoadError} onLoadStarted={this._onLoadStarted} onLoadFinished={this._onLoadFinished} onClose={this._onClose} />;\n  }\n}\n\n"],"mappings":"AAAA;;AAEA,YAAY;;AAAC;EAAA;AAAA;AAAA;AAEb;AAEA;AAA4D;AAAA;AAAA;AAAA;AAAA;AAU5D;AACA;AACA;AAFA,IAGYA,gBAAgB;AAe5B;AACA;AACA;AAFA;AAAA,WAfYA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;EAAhBA,gBAAgB;AAAA,GAAhBA,gBAAgB,gCAAhBA,gBAAgB;AAkG5B;AACA;AACA;AACO,MAAMC,WAAW,SAASC,cAAK,CAACC,SAAS,CAAmB;EAAA;IAAA;IAAA,wCAE/CC,KAAoD,IAAK;MACzE,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,aAAa,EAAE;QAC7B;MACF;MACA,IAAI,CAACD,KAAK,CAACC,aAAa,CAACF,KAAK,CAACG,WAAW,CAAC;IAC7C,CAAC;IAAA,yCAEkBH,KAAqD,IAAK;MAC3E,IAAI,CAAC,IAAI,CAACC,KAAK,CAACG,cAAc,EAAE;QAC9B;MACF;MACA,IAAI,CAACH,KAAK,CAACG,cAAc,CAACJ,KAAK,CAACG,WAAW,CAAC;IAC9C,CAAC;IAAA,sCAEeH,KAAkD,IAAK;MACrE,IAAI,CAAC,IAAI,CAACC,KAAK,CAACI,WAAW,EAAE;QAC3B;MACF;MACA,IAAI,CAACJ,KAAK,CAACI,WAAW,CAACL,KAAK,CAACG,WAAW,CAAC;IAC3C,CAAC;IAAA,kCAEWH,KAA+C,IAAK;MAC9D,IAAI,CAAC,IAAI,CAACC,KAAK,CAACK,OAAO,EAAE;QACvB;MACF;MACA,IAAI,CAACL,KAAK,CAACK,OAAO,CAACN,KAAK,CAACG,WAAW,CAAC;IACvC,CAAC;EAAA;EAEDI,MAAM,GAAG;IACP,oBAAO,6BAAC,mCAAgB,eAAK,IAAI,CAACN,KAAK;MAAE,WAAW,EAAE,IAAI,CAACO,YAAa;MAAC,aAAa,EAAE,IAAI,CAACC,cAAe;MAAC,cAAc,EAAE,IAAI,CAACC,eAAgB;MAAC,OAAO,EAAE,IAAI,CAACC;IAAS,GAAG;EAC/K;AACF;AAAC"}