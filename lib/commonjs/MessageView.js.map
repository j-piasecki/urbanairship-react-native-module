{"version":3,"names":["MessageLoadError","MessageView","React","Component","event","props","onLoadStarted","nativeEvent","onLoadFinished","onLoadError","onClose","render","_onLoadError","_onLoadStarted","_onLoadFinished","_onClose"],"sources":["MessageView.tsx"],"sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\nimport React from \"react\";\nimport { NativeSyntheticEvent } from \"react-native\";\nimport UARCTMessageView from \"./MessageViewNativeComponent\";\n\ninterface UARCTMessageViewProps {\n  messageId: string;\n  onLoadStarted: (event: NativeSyntheticEvent<MessageLoadStartedEvent>) => void;\n  onLoadFinished: (event: NativeSyntheticEvent<MessageLoadFinishedEvent>) => void;\n  onLoadError: (event: NativeSyntheticEvent<MessageLoadErrorEvent>) => void;\n  onClose: (event: NativeSyntheticEvent<MessageClosedEvent>) => void;\n}\n\n/**\n * Enum of possible message load errors\n */\nexport enum MessageLoadError {\n  /**\n   * The message is not available.\n   */\n  NotAvailable = \"MESSAGE_NOT_AVAILABLE\",\n  /**\n   * Failed to fetch the message.\n   */\n  FetchFailed = \"FAILED_TO_FETCH_MESSAGE\",\n  /**\n   * Failed to load the message.\n   */\n  LoadFailed = \"MESSAGE_LOAD_FAILED\"\n}\n\n/**\n * Message load started event.\n */\nexport interface MessageLoadStartedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * Message load finished event.\n */\nexport interface MessageLoadFinishedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * Message load error event.\n */\nexport interface MessageLoadErrorEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n  /**\n   * Whether the failure is retryable.\n   */\n  retryable: boolean\n  /**\n   * The error\n   */\n  error: MessageLoadError\n}\n\n/**\n * Message closed event\n */\nexport interface MessageClosedEvent {\n  /**\n   * The message ID.\n   */\n  messageId: string\n}\n\n/**\n * MessageView props\n */\nexport interface MessageViewProps  {\n  /**\n   * A callback when the view starts loading a message.\n   *\n   * @param event: The message load started event.\n   */\n  onLoadStarted: (event: MessageLoadStartedEvent) => void;\n  /**\n   * A callback when the view finishes loading a message.\n   *\n   * @param event: The message load finished event.\n   */\n  onLoadFinished: (event: MessageLoadFinishedEvent) => void;\n  /**\n   * A callback when the view fails to load a message with an error.\n   *\n   * @param event: The message load error event.\n   */\n  onLoadError: (event: MessageLoadErrorEvent) => void;\n  /**\n   * A callback when the message is closed.\n   *\n   * @param event: The message closed event.\n   */\n  onClose: (event: MessageClosedEvent) => void;\n\n  /**\n   * The message Id.\n   */\n  messageId: string;\n}\n\n/**\n * Inbox message view component.\n */\nexport class MessageView extends React.Component<MessageViewProps> {\n\n  _onLoadStarted = (event: NativeSyntheticEvent<MessageLoadStartedEvent>) => {\n    if (!this.props.onLoadStarted) {\n      return;\n    }\n    this.props.onLoadStarted(event.nativeEvent);\n  };\n\n  _onLoadFinished = (event: NativeSyntheticEvent<MessageLoadFinishedEvent>) => {\n    if (!this.props.onLoadFinished) {\n      return;\n    }\n    this.props.onLoadFinished(event.nativeEvent);\n  };\n\n  _onLoadError = (event: NativeSyntheticEvent<MessageLoadErrorEvent>) => {\n    if (!this.props.onLoadError) {\n      return;\n    }\n    this.props.onLoadError(event.nativeEvent);\n  };\n\n  _onClose = (event: NativeSyntheticEvent<MessageClosedEvent>) => {\n    if (!this.props.onClose) {\n      return;\n    }\n    this.props.onClose(event.nativeEvent);\n  };\n\n  render() {\n    return <UARCTMessageView {...this.props} onLoadError={this._onLoadError} onLoadStarted={this._onLoadStarted} onLoadFinished={this._onLoadFinished} onClose={this._onClose} />;\n  }\n}\n\n"],"mappings":"AAAA;AAEA;;;;;;;AAEA;;AAEA;;;;;;;;AAUA;AACA;AACA;IACYA,gB;AAeZ;AACA;AACA;;;;WAjBYA,gB;EAAAA,gB;EAAAA,gB;EAAAA,gB;GAAAA,gB,gCAAAA,gB;;AAkGZ;AACA;AACA;AACO,MAAMC,WAAN,SAA0BC,eAAMC,SAAhC,CAA4D;EAAA;IAAA;;IAAA,wCAE/CC,KAAD,IAA0D;MACzE,IAAI,CAAC,KAAKC,KAAL,CAAWC,aAAhB,EAA+B;QAC7B;MACD;;MACD,KAAKD,KAAL,CAAWC,aAAX,CAAyBF,KAAK,CAACG,WAA/B;IACD,CAPgE;;IAAA,yCAS9CH,KAAD,IAA2D;MAC3E,IAAI,CAAC,KAAKC,KAAL,CAAWG,cAAhB,EAAgC;QAC9B;MACD;;MACD,KAAKH,KAAL,CAAWG,cAAX,CAA0BJ,KAAK,CAACG,WAAhC;IACD,CAdgE;;IAAA,sCAgBjDH,KAAD,IAAwD;MACrE,IAAI,CAAC,KAAKC,KAAL,CAAWI,WAAhB,EAA6B;QAC3B;MACD;;MACD,KAAKJ,KAAL,CAAWI,WAAX,CAAuBL,KAAK,CAACG,WAA7B;IACD,CArBgE;;IAAA,kCAuBrDH,KAAD,IAAqD;MAC9D,IAAI,CAAC,KAAKC,KAAL,CAAWK,OAAhB,EAAyB;QACvB;MACD;;MACD,KAAKL,KAAL,CAAWK,OAAX,CAAmBN,KAAK,CAACG,WAAzB;IACD,CA5BgE;EAAA;;EA8BjEI,MAAM,GAAG;IACP,oBAAO,6BAAC,mCAAD,eAAsB,KAAKN,KAA3B;MAAkC,WAAW,EAAE,KAAKO,YAApD;MAAkE,aAAa,EAAE,KAAKC,cAAtF;MAAsG,cAAc,EAAE,KAAKC,eAA3H;MAA4I,OAAO,EAAE,KAAKC;IAA1J,GAAP;EACD;;AAhCgE"}