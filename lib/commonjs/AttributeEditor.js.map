{"version":3,"names":["AttributeEditor","constructor","onApply","operations","setAttribute","name","value","attributeValue","attributeType","toString","Date","getTime","operation","type","push","removeAttribute","apply"],"sources":["AttributeEditor.ts"],"sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\n/**\n * Attribute operation\n * @hidden\n */\nexport interface AttributeOperation {\n  /**\n   * The operation name.\n   */\n  action: string;\n  /**\n   * The attribute key.\n   */\n  key: string;\n  /**\n   * The attribute value, if avaialble.\n   */\n  value?: string | number | Date;\n  /**\n   * The attribute type, if available.\n   */\n  type?: \"string\" | \"number\" | \"date\";\n}\n\n/**\n * Editor for attributes.\n */\nexport class AttributeEditor {\n  onApply: (operations: AttributeOperation[]) => void;\n  operations: AttributeOperation[];\n\n  /**\n   * AttributeEditor constructor\n   *\n   * @hidden\n   * @param onApply The apply function\n   */\n  constructor(onApply: (operations: AttributeOperation[]) => void) {\n    this.onApply = onApply;\n    this.operations = [];\n  }\n\n  /**\n   * Adds an attribute.\n   *\n   * @param value The attribute value.\n   * @param name The attribute name.\n   * @return The attribute editor instance.\n   */\n  setAttribute(name: string, value: string | number | boolean | Date): AttributeEditor {\n    var attributeValue: string | number | Date;\n    var attributeType: \"string\" | \"number\" | \"date\";\n\n    if (typeof value == \"boolean\") {\n\n      // No boolean attribute type. Convert value to string.\n      attributeValue = value.toString();\n      attributeType = \"string\";\n\n    } else {\n\n      attributeValue = value;\n      if (typeof value === \"string\") {\n        attributeType = \"string\";\n      } else if (typeof attributeValue === \"number\") {\n        attributeType = \"number\";\n      } else if (value instanceof Date) {\n        // JavaScript's date type doesn't pass through the JS to native bridge.\n        // Dates are instead serialized as milliseconds since epoch.\n        attributeType = \"date\";\n        attributeValue = value.getTime();\n      } else {\n        throw \"Unsupported attribute type: \" + typeof attributeValue;\n      }\n    }\n\n    const operation = { \"action\": \"set\", \"value\": attributeValue, \"key\": name, type: attributeType};\n    this.operations.push(operation);\n\n    return this;\n  }\n\n  /**\n   * Removes an attribute.\n   * @param name The name of the attribute to remove.\n   * @return The attribute editor instance.\n   */\n  removeAttribute(name: string): AttributeEditor {\n    const operation = { \"action\": \"remove\", \"key\": name };\n    this.operations.push(operation);\n    return this;\n  }\n\n  /**\n   * Applies the attribute operations.\n   */\n  apply() {\n    this.onApply(this.operations);\n  }\n}\n"],"mappings":"AAAA;;AAEA,YAAY;;AAEZ;AACA;AACA;AACA;AAHA;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AACA;AACA;AACO,MAAMA,eAAe,CAAC;EAI3B;AACF;AACA;AACA;AACA;AACA;EACEC,WAAW,CAACC,OAAmD,EAAE;IAAA;IAAA;IAC/D,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,UAAU,GAAG,EAAE;EACtB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,YAAY,CAACC,IAAY,EAAEC,KAAuC,EAAmB;IACnF,IAAIC,cAAsC;IAC1C,IAAIC,aAA2C;IAE/C,IAAI,OAAOF,KAAK,IAAI,SAAS,EAAE;MAE7B;MACAC,cAAc,GAAGD,KAAK,CAACG,QAAQ,EAAE;MACjCD,aAAa,GAAG,QAAQ;IAE1B,CAAC,MAAM;MAELD,cAAc,GAAGD,KAAK;MACtB,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC7BE,aAAa,GAAG,QAAQ;MAC1B,CAAC,MAAM,IAAI,OAAOD,cAAc,KAAK,QAAQ,EAAE;QAC7CC,aAAa,GAAG,QAAQ;MAC1B,CAAC,MAAM,IAAIF,KAAK,YAAYI,IAAI,EAAE;QAChC;QACA;QACAF,aAAa,GAAG,MAAM;QACtBD,cAAc,GAAGD,KAAK,CAACK,OAAO,EAAE;MAClC,CAAC,MAAM;QACL,MAAM,8BAA8B,GAAG,OAAOJ,cAAc;MAC9D;IACF;IAEA,MAAMK,SAAS,GAAG;MAAE,QAAQ,EAAE,KAAK;MAAE,OAAO,EAAEL,cAAc;MAAE,KAAK,EAAEF,IAAI;MAAEQ,IAAI,EAAEL;IAAa,CAAC;IAC/F,IAAI,CAACL,UAAU,CAACW,IAAI,CAACF,SAAS,CAAC;IAE/B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;EACEG,eAAe,CAACV,IAAY,EAAmB;IAC7C,MAAMO,SAAS,GAAG;MAAE,QAAQ,EAAE,QAAQ;MAAE,KAAK,EAAEP;IAAK,CAAC;IACrD,IAAI,CAACF,UAAU,CAACW,IAAI,CAACF,SAAS,CAAC;IAC/B,OAAO,IAAI;EACb;;EAEA;AACF;AACA;EACEI,KAAK,GAAG;IACN,IAAI,CAACd,OAAO,CAAC,IAAI,CAACC,UAAU,CAAC;EAC/B;AACF;AAAC"}