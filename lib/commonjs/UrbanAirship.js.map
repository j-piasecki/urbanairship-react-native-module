{"version":3,"names":["UrbanAirshipModule","NativeModules","UrbanAirshipReactModule","EventEmitter","UAEventEmitter","InternalEventType","EventType","SubscriptionScope","NotificationOption","ForegroundPresentationOption","AuthorizedNotificationSetting","AuthorizedNotificationStatus","iOS","Subscription","constructor","onRemove","remove","convertEventEnum","type","NotificationResponse","PushReceived","ChannelCreated","DeepLink","NotificationOptInStatus","MessageCenterUpdated","DisplayMessageCenter","DisplayPreferenceCenter","PushTokenReceived","Error","Feature","UrbanAirship","takeOff","config","isFlying","setAndroidNotificationConfig","setUserNotificationsEnabled","enabled","isUserNotificationsEnabled","setEnabledFeatures","features","getEnabledFeatures","enableFeature","disableFeature","isFeatureEnabled","enableUserPushNotifications","enableChannelCreation","getUnreadMessageCount","getNotificationStatus","getNotificationChannelStatus","channel","Platform","OS","setNamedUser","namedUser","getNamedUser","addTag","tag","removeTag","getTags","getSubscriptionLists","types","editContactTagGroups","TagGroupEditor","operations","editChannelTagGroups","editChannelAttributes","AttributeEditor","editContactAttributes","editChannelSubscriptionLists","SubscriptionListEditor","subscriptionListUpdates","editContactSubscriptionLists","ScopedSubscriptionListEditor","trackScreen","screen","getChannelId","getRegistrationToken","associateIdentifier","key","id","addCustomEvent","event","actionArg","event_name","_name","event_value","_value","transaction_id","_transactionId","properties","_properties","Promise","resolve","reject","runAction","then","error","name","value","setForegroundPresentationOptions","options","setNotificationOptions","addListener","eventType","listener","removeListener","removeAllListeners","setAutobadgeEnabled","console","log","isAutobadgeEnabled","setBadgeNumber","badgeNumber","getBadgeNumber","displayMessageCenter","dismissMessageCenter","displayMessage","messageId","dismissMessage","getInboxMessages","deleteInboxMessage","markInboxMessageRead","refreshInbox","setAutoLaunchDefaultMessageCenter","setCurrentLocale","localeIdentifier","getCurrentLocale","clearLocale","getActiveNotifications","clearNotifications","clearNotification","identifier","setInAppAutomationDisplayInterval","seconds","displayPreferenceCenter","preferenceCenterId","getPreferenceCenterConfig","setUseCustomPreferenceCenterUi","useCustomUi"],"sources":["UrbanAirship.ts"],"sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict'\n\nimport { NativeModules, Platform } from \"react-native\"\n\nimport { CustomEvent } from \"./CustomEvent\";\nimport { TagGroupEditor, TagGroupOperation } from \"./TagGroupEditor\";\nimport { AttributeEditor, AttributeOperation } from \"./AttributeEditor\";\nimport { UAEventEmitter } from \"./UAEventEmitter\";\nimport { SubscriptionListEditor, SubscriptionListUpdate} from \"./SubscriptionListEditor\";\nimport { ScopedSubscriptionListEditor, ScopedSubscriptionListUpdate} from \"./ScopedSubscriptionListEditor\";\nimport { JsonObject, JsonValue } from \"./Json\";\nimport { SubscriptionLists, SubscriptionListType } from \"./SubscriptionLists\";\nimport { PreferenceCenter } from './PreferenceCenter';\n\n/**\n * @hidden\n */\nconst UrbanAirshipModule = NativeModules.UrbanAirshipReactModule\n\n/**\n * @hidden\n */\nconst EventEmitter = new UAEventEmitter()\n\n/**\n * Enum of internal event type names used by UAEventEmitter\n * @hidden\n */\nenum InternalEventType {\n  ChannelCreated = \"com.airship.channel_created\",\n  NotificationResponse = \"com.airship.notification_response\",\n  PushReceived = \"com.airship.push_received\",\n  DeepLink = \"com.airship.deep_link\",\n  MessageCenterUpdated = \"com.airship.message_center_updated\",\n  NotificationOptInStatus = \"com.airship.notification_opt_in_status\",\n  DisplayMessageCenter = \"com.airship.display_message_center\",\n  DisplayPreferenceCenter = \"com.airship.display_preference_center\",\n  PushTokenReceived = \"com.airship.push_token_received\"\n}\n\n/**\n * Enum of event type names.\n */\nexport enum EventType {\n  /**\n   * Notification response event. On Android, this event will be dispatched\n   * in the background for background notifications actions.\n   */\n  NotificationResponse = \"notification_response\",\n  /**\n   * Push received event. On Android, this event will only be dispatched\n   * in the background if the app is able to start a service or by sending a\n   * high priority FCM message.\n   */\n  PushReceived = \"push_received\",\n  /**\n   * Channel created event.\n   */\n  ChannelCreated = \"channel_created\",\n  /**\n   * Deep link event.\n   */\n  DeepLink = \"deep_link\",\n  /**\n   * Notification opt-in status event.\n   */\n  NotificationOptInStatus = \"notification_opt_in_status\",\n  /**\n   * Message Center updated event.\n   */\n  MessageCenterUpdated = \"message_center_updated\",\n  /**\n   * Display Message Center event.\n   */\n  DisplayMessageCenter = \"display_message_center\",\n  /**\n   * Display preference center event.\n   */\n  DisplayPreferenceCenter = \"display_preference_center\",\n  /**\n   * Push token received.\n   */\n  PushTokenReceived = \"push_token_received\",\n}\n\n/**\n * Inbox message object.\n */\nexport interface InboxMessage {\n  /**\n   * The message ID. Needed to display, mark as read, or delete the message.\n   */\n  id: string\n  /**\n   * The message title.\n   */\n  title: string\n  /**\n   * The message sent date in milliseconds.\n   */\n  sentDate: number\n  /**\n   * Optional - The icon url for the message.\n   */\n  listIconUrl: string\n  /**\n   * The unread / read status of the message.\n   */\n  isRead: boolean\n  /**\n   * The deleted status of the message.\n   */\n  isDeleted: boolean\n  /**\n   * String to String map of any message extras.\n   */\n  extras: Record<string, string>\n}\n\n/**\n * Event fired when a push is received.\n */\nexport interface PushReceivedEvent {\n  pushPayload: PushPayload \n}\n\n/**\n * The push payload.\n */\n export interface PushPayload {\n  /**\n   * The alert.\n   */\n  alert?: string\n  /**\n   * The title.\n   */\n  title?: string\n  /**\n   * The notification ID.\n   */\n  notificationId?: string\n  /**\n   * The notification extras.\n   */\n  extras: JsonObject\n}\n\n/**\n * Event fired when the user initiates a notification response.\n */\nexport interface NotificationResponseEvent {\n  /**\n   * The push notification.\n   */\n  pushPayload: PushPayload\n  \n  /**\n   * The action button ID, if available.\n   */\n  actionId?: string\n  \n  /**\n   * Indicates whether the response was a foreground action.\n   * This value is always if the user taps the main notification,\n   * otherwise it is defined by the notification action button.\n   */\n  isForeground: boolean\n}\n\n/**\n * Airship config environment\n */\nexport interface ConfigEnvironment {\n  /**\n   * App key.\n   */\n  appKey: string\n\n  /**\n   * App secret.\n   */\n  appSecret: string\n\n  /**\n   * Optional log level.\n   */\n  logLevel?: LogLevel\n}\n\n/**\n * Possible sites.\n */\nexport type Site = \"us\" | \"eu\";\n\n/**\n * Log levels.\n */\nexport type LogLevel = \"verbose\" | \"debug\" | \"info\" | \"warning\" | \"error\" | \"none\";\n\n/**\n * Airship config\n */\nexport interface AirshipConfig {\n  /**\n   * Default environment.\n   */\n  default?: ConfigEnvironment,\n\n  /**\n   * Development environment. Overrides default environment if inProduction is false.\n   */\n  development?: ConfigEnvironment,\n\n  /**\n   * Production environment. Overrides default environment if inProduction is true.\n   */\n  production?: ConfigEnvironment,\n\n  /**\n   * Cloud site.\n   */\n  site?: Site\n\n  /**\n   * Switches the environment from development or production. If the value is not\n   * set, Airship will determine the value at runtime.\n   */\n  inProduction?: boolean,\n\n  /**\n   * URL allow list.\n   */\n  urlAllowList?: string[],\n\n  /**\n   * URL allow list for open URL scope.\n   */\n  urlAllowListScopeOpenUrl?: string[],\n\n  /**\n   * URL allow list for JS bridge injection.\n   */\n  urlAllowListScopeJavaScriptInterface?: string[],\n\n  /**\n   * Enables delayed channel creation.\n   */\n  isChannelCreationDelayEnabled?: boolean,\n\n  /**\n   * Initial config URL for custom Airship domains. The URL\n   * should also be added to the urlAllowList.\n   */\n  initialConfigUrl?: String,\n\n  /**\n   * Enabled features. Defaults to all.\n   */\n  enabledFeatures?: Feature[],\n\n  /**\n   * iOS config.\n   */\n  ios?: {\n    /**\n     * itunesId for rate app and app store deep links.\n     */\n    itunesId?: string\n  },\n\n  /**\n   * Android config.\n   */\n  android?: {\n    /**\n     * App store URI\n     */\n    appStoreUri?: string,\n\n    /**\n     * Fcm app name if using multiple FCM projects.\n     */\n    fcmFirebaseAppName?: string,\n    \n    /**\n     * Notification config.\n     */\n    notificationConfig?: NotificationConfigAndroid\n  }\n}\n\n/**\n * Subscription Scope types.\n */\n export enum SubscriptionScope {\n  App = \"app\",\n  Web = \"web\",\n  Sms = \"sms\",\n  Email = \"email\"\n}\n\n/**\n * iOS options\n */\nexport namespace iOS {\n\n  /**\n   * Enum of notification options. iOS only.\n   */\n  export enum NotificationOption {\n    /**\n     * Alerts.\n     */\n    Alert = \"alert\",\n    /**\n     * Sounds.\n     */\n    Sound = \"sound\",\n    /**\n     * Badges.\n     */\n    Badge = \"badge\",\n    /**\n     * Car play.\n     */\n    CarPlay = \"car_play\",\n    /**\n     * Critical Alert.\n     */\n    CriticalAlert = \"critical_alert\",\n    /**\n     * Provides app notification settings.\n     */\n    ProvidesAppNotificationSettings = \"provides_app_notification_settings\",\n    /**\n     * Provisional.\n     */\n    Provisional = \"provisional\"\n  }\n\n  /**\n   * Enum of foreground notification options.\n   */\n  export enum ForegroundPresentationOption {\n    /**\n     * Play the sound associated with the notification.\n     */\n    Sound = \"sound\",\n    /**\n     * Apply the notification's badge value to the app’s icon.\n     */\n    Badge = \"badge\",\n\n    /**\n     * Show the notification in Notification Center. On iOS 13 an older,\n     * this will also show the notification as a banner.\n     */\n    List = \"list\",\n    \n     /**\n     * Present the notification as a banner. On iOS 13 an older,\n     * this will also show the notification in the Notification Center.\n     */\n    Banner = \"banner\"\n  }\n\n  /**\n   * Enum of authorized notification settings.\n   */\n  export enum AuthorizedNotificationSetting {\n    /**\n     * Alerts.\n     */\n    Alert = \"alert\",\n    /**\n     * Sounds.\n     */\n    Sound = \"sound\",\n    /**\n     * Badges.\n     */\n    Badge = \"badge\",\n    /**\n     * CarPlay.\n     */\n    CarPlay = \"car_play\",\n    /**\n     * Lock screen.\n     */\n    LockScreen = \"lock_screen\",\n    /**\n     * Notification center.\n     */\n    NotificationCenter = \"notification_center\",\n    /**\n     * Critical alert.\n     */\n    CriticalAlert = \"critical_alert\",\n    /**\n     * Announcement.\n     */\n    Announcement = \"announcement\",\n    /**\n     * Scheduled delivery.\n     */\n    ScheduledDelivery = \"scheduled_delivery\",\n    /**\n    * Time sensitive.\n    */\n    TimeSensitive = \"time_sensitive\"\n  }\n\n  /**\n   * Enum of authorized status.\n   */\n   export enum AuthorizedNotificationStatus {\n    /**\n     * Not determined.\n     */\n    NotDetermined = \"not_determined\",\n    \n    /**\n     * Denied.\n     */\n    Denied = \"denied\",\n    \n    /**\n     * Authorized.\n     */\n    Authorized = \"authorized\",\n    \n    /**\n     * Provisional.\n     */\n    Provisional = \"provisional\",\n\n    /**\n     * Ephemeral.\n     */\n    Ephemeral = \"ephemeral\"\n  }\n}\n\n\nexport interface NotificationStatus {\n  /**\n   * If airship is opted in for push notifications are not.\n   */\n  airshipOptIn: boolean\n\n  /**\n   * If notifications are enabled on Airship or not.\n   */\n  airshipEnabled: boolean\n\n  /**\n   * If notifications are enabled in the app settings or not.\n   */\n  systemEnabled: boolean\n\n  /**\n   * iOS status.\n   */\n  ios?: {\n    /**\n     * Authorized settings.\n     */\n    authorizedSettings: [iOS.AuthorizedNotificationSetting],\n\n    /**\n     * Authorized status.\n     */\n    authorizedStatus: iOS.AuthorizedNotificationStatus\n  }\n}\n\n/**\n * Event fired when the notification opt-in status changes.\n */\nexport interface NotificationOptInStatusEvent {\n  /**\n   * Whether the user is opted in to notifications.\n   */\n  optIn: boolean\n\n  /**\n   * The authorized notification settings. iOS only.\n   */\n  authorizedSettings?: [iOS.AuthorizedNotificationSetting]\n}\n\n/**\n * Event fired when the Message Center  is updated.\n */\nexport interface MessageCenterUpdatedEvent {\n  /**\n   * The unread message count.\n   */\n  messageUnreadCount: number\n  /**\n   * The total message count.\n   */\n  messageCount: number\n}\n\n/**\n * Event fired when the Message Center is requested to be displayed.\n */\nexport interface DisplayMessageCenterEvent {\n  /**\n   * The message ID, if available.\n   */\n  messageId?: string\n}\n\n/**\n * Event fired when a deep link is opened.\n */\nexport interface DeepLinkEvent {\n  /**\n   * The deep link string.\n   */\n  deepLink: string\n}\n\n/**\n * Event fired when a preference center is requested to be displayed.\n */\n export interface DisplayPreferenceCenterEvent {\n  /**\n   * The preference center Id.\n   */\n  preferenceCenterId: string\n}\n\n\n/**\n * A listener subscription.\n */\nexport class Subscription {\n  onRemove: () => void\n  constructor(onRemove: () => void) {\n    this.onRemove = onRemove\n  }\n  /**\n   * Removes the listener.\n   */\n  remove(): void {\n    this.onRemove()\n  }\n}\n\n/**\n * Event fired when a channel registration occurs.\n */\nexport interface ChannelCreatedEvent {\n  /**\n   * The channel ID.\n   */\n  channelId: string\n}\n\nexport interface PushTokenReceivedEvent {\n  /**\n  * The push token.\n  */\n  pushToken: string\n}\n\n/**\n * Converts between public and internal event types.\n * @hidden\n */\nfunction convertEventEnum(type: EventType): string {\n  if (type === EventType.NotificationResponse) {\n    return InternalEventType.NotificationResponse\n  } else if (type === EventType.PushReceived) {\n    return InternalEventType.PushReceived\n  } else if (type === EventType.ChannelCreated) {\n    return InternalEventType.ChannelCreated\n  } else if (type == EventType.DeepLink) {\n    return InternalEventType.DeepLink\n  } else if (type == EventType.NotificationOptInStatus) {\n    return InternalEventType.NotificationOptInStatus\n  } else if (type == EventType.MessageCenterUpdated) {\n    return InternalEventType.MessageCenterUpdated\n  } else if (type == EventType.DisplayMessageCenter) {\n    return InternalEventType.DisplayMessageCenter\n  } else if (type == EventType.DisplayPreferenceCenter) {\n    return InternalEventType.DisplayPreferenceCenter\n  } else if (type == EventType.PushTokenReceived) {\n    return InternalEventType.PushTokenReceived\n  }\n\n  throw new Error(\"Invalid event name: \" + type)\n}\n\n/**\n * Android notification config.\n */\nexport interface NotificationConfigAndroid {\n  /**\n   * The icon resource name.\n   */\n  icon?: string\n  /**\n   * The large icon resource name.\n   */\n  largeIcon?: string\n  /**\n   * The default android notification channel ID.\n   */\n  defaultChannelId?: string\n  /**\n   * The accent color. Must be a hex value #AARRGGBB.\n   */\n  accentColor?: string\n}\n\n/**\n * Enum of authorized Features.\n */\nexport enum Feature {\n  None = \"none\",\n  InAppAutomation = \"in_app_automation\",\n  MessageCenter = \"message_center\",\n  Push = \"push\",\n  Chat = \"chat\",\n  Analytics = \"analytics\",\n  TagsAndAttributes = \"tags_and_attributes\",\n  Contacts = \"contacts\",\n  Location = \"location\",\n  All = \"all\"\n}\n\n/**\n* The main Airship API.\n*/\nexport class UrbanAirship {\n\n  /**\n   * Calls takeOff. If Airship is already initialized the new config will be applied on next app init.\n   *\n   * @param config The airship config.\n   * @return A promise with the result. The result will be true if Airship is initialized, otherwise false.\n   */\n  static takeOff(config: AirshipConfig): Promise<boolean> {\n    return UrbanAirshipModule.takeOff(config)\n  }\n\n  /**\n   * Checks if Airship is initialized.\n   *\n   * @return A promise with the result. The result will be true if Airship is initialized, otherwise false.\n   */\n  static isFlying(): Promise<boolean> {\n    return UrbanAirshipModule.isFlying()\n  }\n  \n  /**\n   * Sets the Android notification config. Values not set will fallback to any values set in the airship config options.\n   *\n   * @param config The notification config object.\n   */\n  static setAndroidNotificationConfig(config: NotificationConfigAndroid) {\n    UrbanAirshipModule.setAndroidNotificationConfig(config)\n  }\n\n  /**\n   * Sets user notifications enabled. The first time user notifications are enabled\n   * on iOS, it will prompt the user for notification permissions.\n   *\n   * @param enabled true to enable notifications, false to disable.\n   */\n  static setUserNotificationsEnabled(enabled: boolean) {\n    UrbanAirshipModule.setUserNotificationsEnabled(enabled)\n  }\n\n  /**\n   * Checks if user notifications are enabled or not.\n   *\n   * @return A promise with the result.\n   */\n  static isUserNotificationsEnabled(): Promise<boolean> {\n    return UrbanAirshipModule.isUserNotificationsEnabled()\n  }\n\n  /**\n   * Sets the SDK features that will be enabled. The rest of the features will be disabled.\n   * \n   * If all features are disabled the SDK will not make any network requests or collect data.\n   *\n   * @note All features are enabled by default.\n   * @param feature An array of `Features` to enable.\n   * @return A promise that returns true if the enablement was authorized.\n   */\n  static setEnabledFeatures(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.setEnabledFeatures(features)\n  }\n\n  /**\n   * Gets a Feature array with the enabled features.\n   * \n   * @return A promise that returns the enabled features as a Feature array.\n   */\n  static getEnabledFeatures(): Promise<Feature[]> {\n    return UrbanAirshipModule.getEnabledFeatures()\n  }\n\n  /**\n   * Enables one or many features.\n   *\n   * @param feature An array of `Feature` to enable.\n   * @return A promise that returns true if the enablement was authorized.\n   */\n  static enableFeature(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.enableFeature(features)\n  }\n\n  /**\n   * Disables one or many features.\n   *\n   * @param feature An array of `Feature` to disable.\n   * @return A promise that returns true if the disablement was authorized.\n   */\n  static disableFeature(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.disableFeature(features)\n  }\n\n  /**\n   * Checks if a given feature is enabled or not.\n   *\n   * @return A promise that returns true if the features are enabled, false otherwise.\n   */\n  static isFeatureEnabled(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.isFeatureEnabled(features)\n  }\n\n  /**\n   * Enables user notifications.\n   *\n   * @return A promise that returns true if enablement was authorized\n   * or false if enablement was rejected\n   */\n  static enableUserPushNotifications(): Promise<boolean> {\n    return UrbanAirshipModule.enableUserPushNotifications()\n  }\n\n  /**\n   * Enables channel creation if `channelCreationDelayEnabled` was\n   * enabled in the config.\n   */\n  static enableChannelCreation() {\n    UrbanAirshipModule.enableChannelCreation()\n  }\n\n  /**\n   * Gets the count of Unread messages in the inbox.\n   */\n  static getUnreadMessageCount(): Promise<number> {\n    return UrbanAirshipModule.getUnreadMessageCount();\n  }\n\n  /**\n   * Gets the notification status for the app.\n   *\n   * @return A promise with the result.\n   */\n  static getNotificationStatus(): Promise<NotificationStatus> {\n    return UrbanAirshipModule.getNotificationStatus()\n  }\n\n  /**\n   * Gets the status of the specified Notification Channel.\n   * This method is only supported on Android. iOS will throw an error.\n   *\n   * @param channel The channel's name.\n   * @return A promise with the result.\n   */\n  static getNotificationChannelStatus(channel: string): Promise<string> {\n    if (Platform.OS != 'android') {\n      throw new Error(\"This method is only supported on Android devices.\")\n    }\n    return UrbanAirshipModule.getNotificationChannelStatus(channel)\n  }\n\n  /**\n   * Sets the named user.\n   *\n   * @param namedUser The named user string, or null/undefined to clear the named user.\n   */\n  static setNamedUser(namedUser: string | null | undefined) {\n    UrbanAirshipModule.setNamedUser(namedUser)\n  }\n\n  /**\n   * Gets the named user.\n   *\n   * @return A promise with the result.\n   */\n  static getNamedUser(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getNamedUser()\n  }\n\n  /**\n   * Adds a channel tag.\n   *\n   * @param tag A channel tag.\n   */\n  static addTag(tag: string) {\n    UrbanAirshipModule.addTag(tag)\n  }\n\n  /**\n   * Removes a channel tag.\n   *\n   * @param tag A channel tag.\n   */\n  static removeTag(tag: string) {\n    UrbanAirshipModule.removeTag(tag)\n  }\n\n  /**\n   * Gets the channel tags.\n   *\n   * @return A promise with the result.\n   */\n  static getTags(): Promise<string[]> {\n    return UrbanAirshipModule.getTags()\n  }\n\n  /**\n   * Gets the subscription lists.\n   *\n   * @param types The types of subscription lists. Values: `channel`, `contact` (default: [`channel`]).\n   * @return A promise with the result.\n   */\n   static getSubscriptionLists(types?: [...SubscriptionListType[]]): Promise<SubscriptionLists> {\n    return UrbanAirshipModule.getSubscriptionLists(types ?? ['channel']);\n  }\n\n\n  /**\n   * Creates an editor to modify the contact tag groups.\n   *\n   * @return A tag group editor instance.\n   */\n   static editContactTagGroups(): TagGroupEditor {\n    return new TagGroupEditor((operations: TagGroupOperation[]) => {\n      UrbanAirshipModule.editContactTagGroups(operations)\n    })\n  }\n\n  /**\n   * Creates an editor to modify the channel tag groups.\n   *\n   * @return A tag group editor instance.\n   */\n  static editChannelTagGroups(): TagGroupEditor {\n    return new TagGroupEditor((operations: TagGroupOperation[]) => {\n      UrbanAirshipModule.editChannelTagGroups(operations)\n    })\n  }\n\n  /**\n   * Creates an editor to modify the channel attributes.\n   *\n   * @return An attribute editor instance.\n   */\n  static editChannelAttributes(): AttributeEditor {\n    return new AttributeEditor((operations: AttributeOperation[]) => {\n      UrbanAirshipModule.editChannelAttributes(operations)\n    })\n  }\n\n  /**\n   * Creates an editor to modify the contact attributes.\n   *\n   * @return An attribute editor instance.\n   */\n  static editContactAttributes(): AttributeEditor {\n    return new AttributeEditor((operations: AttributeOperation[]) => {\n      UrbanAirshipModule.editContactAttributes(operations)\n    })\n  }\n\n  /**\n   * Edit the subscription lists associated with the current Channel.\n   *\n   * @return A promise with the result.\n   */\n  static editChannelSubscriptionLists(): SubscriptionListEditor {\n    return new SubscriptionListEditor((subscriptionListUpdates: SubscriptionListUpdate[]) => {\n        UrbanAirshipModule.editChannelSubscriptionLists(subscriptionListUpdates)\n    })\n  }\n\n  /**\n   * Edit the subscription lists associated with the current Contact.\n   *\n   * @return A promise with the result.\n   */\n  static editContactSubscriptionLists(): ScopedSubscriptionListEditor {\n    return new ScopedSubscriptionListEditor((subscriptionListUpdates: ScopedSubscriptionListUpdate[]) => {\n        UrbanAirshipModule.editContactSubscriptionLists(subscriptionListUpdates)\n    })\n  }\n  \n  /**\n   * Initiates screen tracking for a specific app screen, must be called once per tracked screen.\n   *\n   * @param screen The screen's string identifier\n   */\n  static trackScreen(screen: string) {\n    UrbanAirshipModule.trackScreen(screen)\n  }\n\n  /**\n   * Gets the channel ID.\n   *\n   * @return A promise with the result.\n   */\n  static getChannelId(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getChannelId()\n  }\n\n  /**\n   * Gets the registration token.\n   *\n   * @return A promise with the result. The registration token might be undefined\n   * if registration is currently in progress, if the app is not setup properly\n   * for remote notifications, if running on an iOS simulator, or if running on\n   * an Android device that has an outdated or missing version of Google Play Services.\n   */\n  static getRegistrationToken(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getRegistrationToken()\n  }\n\n  /**\n   * Associates an identifier for the Connect data stream.\n   *\n   * @param key The identifier's key.\n   * @param id The identifier's id, or null/undefined to clear.\n   */\n  static associateIdentifier(key: string, id?: string) {\n    UrbanAirshipModule.associateIdentifier(key, id)\n  }\n\n  /**\n   * Adds a custom event.\n   *\n   * @param event The custom event.\n   * @return A promise that returns null if resolved, or an Error if the\n   * custom event is rejected.\n   */\n  static addCustomEvent(event: CustomEvent): Promise<null | Error> {\n    const actionArg = {\n      event_name: event._name,\n      event_value: event._value,\n      transaction_id: event._transactionId,\n      properties: event._properties\n    }\n\n    return new Promise((resolve, reject) => {\n      UrbanAirshipModule.runAction(\"add_custom_event_action\", actionArg).then(() => {\n        resolve(null)\n      }, (error: Error) => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n   * Runs an Urban Airship action.\n   *\n   * @param name The name of the action.\n   * @param value The action's value.\n   * @return A promise that returns the action result if the action\n   * successfully runs, or the Error if the action was unable to be run.\n   */\n  static runAction(name: string, value?: JsonValue): Promise<JsonValue | Error> {\n    return UrbanAirshipModule.runAction(name, value)\n  }\n\n  /**\n   * Sets the foreground presentation options for iOS.\n   * This method is only supported on iOS. Android will no-op.\n   *\n   * @param options The array of foreground presentation options.\n   */\n  static setForegroundPresentationOptions(options: [iOS.ForegroundPresentationOption]) {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.setForegroundPresentationOptions(options)\n    }\n  }\n\n  /**\n   * Sets the notification options for iOS.\n   * This method is only supported on iOS. Android will no-op.\n   *\n   * @param options The array of notification options.\n   */\n   static setNotificationOptions(options: [iOS.NotificationOption]) {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.setNotificationOptions(options)\n    }\n  }\n\n  /**\n   * Adds a listener for an Urban Airship event.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Registration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   * @param listener The event listener.\n   * @return A subscription.\n   */\n  static addListener(eventType: EventType, listener: (...args: any[]) => any): Subscription {\n    EventEmitter.addListener(convertEventEnum(eventType), listener)\n    return new Subscription(() => {\n      UrbanAirship.removeListener(eventType, listener)\n    })\n  }\n\n  /**\n   * Removes a listener for an Urban Airship event.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Registration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   * @param listener The event listener. Should be a reference to the function passed into addListener.\n   */\n  static removeListener(eventType: EventType, listener: (...args: any[]) => any) {\n    EventEmitter.removeListener(convertEventEnum(eventType), listener)\n  }\n\n  /**\n   * Removes all listeners for Urban Airship events.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Registration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   */\n  static removeAllListeners(eventType: EventType) {\n    EventEmitter.removeAllListeners(convertEventEnum(eventType))\n  }\n\n  /**\n   * Enables or disables autobadging on iOS. Badging is not supported for Android.\n   *\n   * @param enabled Whether or not to enable autobadging.\n   */\n  static setAutobadgeEnabled(enabled: boolean) {\n    if (Platform.OS == 'ios') {\n      UrbanAirshipModule.setAutobadgeEnabled(enabled)\n    } else {\n      console.log(\"This feature is not supported on this platform.\")\n    }\n  }\n\n  /**\n   * Checks to see if autobadging on iOS is enabled. Badging is not supported for Android.\n   *\n   * @return A promise with the result, either true or false.\n   */\n  static isAutobadgeEnabled(): Promise<boolean> {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.isAutobadgeEnabled()\n    } else {\n      console.log(\"This feature is not supported on this platform.\")\n      return new Promise(resolve => resolve(false))\n    }\n  }\n\n  /**\n   * Sets the badge number for iOS. Badging is not supported for Android.\n   *\n   * @param badgeNumber The badge number.\n   */\n  static setBadgeNumber(badgeNumber: number) {\n    if (Platform.OS == 'ios') {\n      UrbanAirshipModule.setBadgeNumber(badgeNumber)\n    } else {\n      console.log(\"This feature is not supported on this platform.\")\n    }\n  }\n\n  /**\n   * Gets the current badge number for iOS. Badging is not supported for Android\n   * and this method will always return 0.\n   *\n   * @return A promise with the result.\n   */\n  static getBadgeNumber(): Promise<number> {\n    if (Platform.OS != 'ios') {\n      console.log(\"This feature is not supported on this platform.\")\n    }\n    return UrbanAirshipModule.getBadgeNumber()\n  }\n\n  /**\n   * Displays the default message center.\n   */\n  static displayMessageCenter() {\n    UrbanAirshipModule.displayMessageCenter()\n  }\n\n  /**\n   * Dismisses the default message center.\n   */\n  static dismissMessageCenter() {\n    UrbanAirshipModule.dismissMessageCenter()\n  }\n\n  /**\n   * Displays an inbox message.\n   *\n   * @param messageId The id of the message to be displayed.\n   * @return A promise with the result.\n   */\n  static displayMessage(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.displayMessage(messageId)\n  }\n\n  /**\n   * Dismisses the currently displayed inbox message.\n   */\n  static dismissMessage() {\n    UrbanAirshipModule.dismissMessage()\n  }\n\n  /**\n   * Retrieves the current inbox messages.\n   *\n   * @return A promise with the result.\n   */\n  static getInboxMessages(): Promise<InboxMessage[]> {\n    return UrbanAirshipModule.getInboxMessages()\n  }\n\n  /**\n   * Deletes an inbox message.\n   *\n   * @param messageId The id of the message to be deleted.\n   * @return A promise with the result.\n   */\n  static deleteInboxMessage(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.deleteInboxMessage(messageId)\n  }\n\n  /**\n   * Marks an inbox message as read.\n   *\n   * @param messageId The id of the message to be marked as read.\n   * @return A promise with the result.\n   */\n  static markInboxMessageRead(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.markInboxMessageRead(messageId)\n  }\n\n  /**\n   * Forces the inbox to refresh. This is normally not needed as the inbox will\n   * automatically refresh on foreground or when a push arrives that's associated\n   * with a message.\n   *\n   * @return{Promise.<boolean>} A promise with the result.\n   */\n  static refreshInbox(): Promise<boolean> {\n    return UrbanAirshipModule.refreshInbox()\n  }\n\n  /**\n   * Sets the default behavior when the message center is launched from a push\n   * notification. If set to false the message center must be manually launched.\n   *\n   * @param enabled true to automatically launch the default message center, false to disable.\n   */\n  static setAutoLaunchDefaultMessageCenter(enabled: boolean) {\n    UrbanAirshipModule.setAutoLaunchDefaultMessageCenter(enabled)\n  }\n\n  /**\n   * Overriding the locale.\n   *\n   * @param localeIdentifier The locale identifier.\n   */\n  static setCurrentLocale(localeIdentifier: String) {\n    UrbanAirshipModule.setCurrentLocale(localeIdentifier)\n  }\n\n  /**\n   * Getting the locale currently used by Airship.\n   *\n   */\n  static getCurrentLocale(): Promise<String> {\n    return UrbanAirshipModule.getCurrentLocale()\n  }\n\n  /**\n   * Resets the current locale.\n   *\n   */\n  static clearLocale() {\n    UrbanAirshipModule.clearLocale()\n  }\n\n  /**\n   * Gets all the active notifications for the application.\n   * Supported on Android Marshmallow (23)+ and iOS 10+.\n   *\n   * @return A promise with the result.\n   */\n  static getActiveNotifications(): Promise<PushPayload[]> {\n    return UrbanAirshipModule.getActiveNotifications()\n  }\n\n  /**\n   * Clears all notifications for the application.\n   * Supported on Android and iOS 10+. For older iOS devices, you can set\n   * the badge number to 0 to clear notifications.\n   */\n  static clearNotifications() {\n    UrbanAirshipModule.clearNotifications()\n  }\n\n  /**\n   * Clears a specific notification.\n   * Supported on Android and iOS 10+.\n   *\n   * @param identifier The notification identifier. The identifier will be\n   * available in the PushReceived event and in the active notification response\n   * under the \"notificationId\" field.\n   */\n  static clearNotification(identifier: string) {\n    UrbanAirshipModule.clearNotification(identifier)\n  }\n\n  /**\n   * Sets the in-app message display interval on the default display coordinator.\n   *\n   * @param seconds The minimum number of seconds between message displays.\n   */\n  static setInAppAutomationDisplayInterval(seconds: number) {\n    UrbanAirshipModule.setInAppAutomationDisplayInterval(seconds)\n  }\n\n  static displayPreferenceCenter(preferenceCenterId: String) {\n    UrbanAirshipModule.displayPreferenceCenter(preferenceCenterId);\n  }\n\n  static getPreferenceCenterConfig(preferenceCenterId: String): Promise<PreferenceCenter> {\n    return UrbanAirshipModule.getPreferenceCenterConfig(preferenceCenterId);\n  }\n\n  static setUseCustomPreferenceCenterUi(useCustomUi: boolean, preferenceCenterId: String) {\n    UrbanAirshipModule.setUseCustomPreferenceCenterUi(useCustomUi, preferenceCenterId);\n  }\n}\n"],"mappings":"AAAA;AAEA;;;;;;;AAEA;;AAGA;;AACA;;AACA;;AACA;;AACA;;;;AAKA;AACA;AACA;AACA,MAAMA,kBAAkB,GAAGC,2BAAcC,uBAAzC;AAEA;AACA;AACA;;AACA,MAAMC,YAAY,GAAG,IAAIC,8BAAJ,EAArB;AAEA;AACA;AACA;AACA;;IACKC,iB;AAYL;AACA;AACA;;WAdKA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,KAAAA,iB;;IAeOC,S;AA0CZ;AACA;AACA;;;;WA5CYA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;EAAAA,S;GAAAA,S,yBAAAA,S;;AAyPZ;AACA;AACA;IACaC,iB;AAOb;AACA;AACA;;;;WATaA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;EAAAA,iB;GAAAA,iB,iCAAAA,iB;;;;;;MAeCC,kB;;aAAAA,kB;IAAAA,kB;IAAAA,kB;IAAAA,kB;IAAAA,kB;IAAAA,kB;IAAAA,kB;IAAAA,kB;KAAAA,kB,KAAAA,kB;;;MAkCAC,4B;;aAAAA,4B;IAAAA,4B;IAAAA,4B;IAAAA,4B;IAAAA,4B;KAAAA,4B,KAAAA,4B;;;MA0BAC,6B;;aAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;IAAAA,6B;KAAAA,6B,KAAAA,6B;;;MA8CCC,4B;;aAAAA,4B;IAAAA,4B;IAAAA,4B;IAAAA,4B;IAAAA,4B;IAAAA,4B;KAAAA,4B,KAAAA,4B;;;GA/GEC,G,mBAAAA,G;;AAwOjB;AACA;AACA;AACO,MAAMC,YAAN,CAAmB;EAExBC,WAAW,CAACC,QAAD,EAAuB;IAAA;;IAChC,KAAKA,QAAL,GAAgBA,QAAhB;EACD;EACD;AACF;AACA;;;EACEC,MAAM,GAAS;IACb,KAAKD,QAAL;EACD;;AAVuB;AAa1B;AACA;AACA;;;;;AAeA;AACA;AACA;AACA;AACA,SAASE,gBAAT,CAA0BC,IAA1B,EAAmD;EACjD,IAAIA,IAAI,KAAKZ,SAAS,CAACa,oBAAvB,EAA6C;IAC3C,OAAOd,iBAAiB,CAACc,oBAAzB;EACD,CAFD,MAEO,IAAID,IAAI,KAAKZ,SAAS,CAACc,YAAvB,EAAqC;IAC1C,OAAOf,iBAAiB,CAACe,YAAzB;EACD,CAFM,MAEA,IAAIF,IAAI,KAAKZ,SAAS,CAACe,cAAvB,EAAuC;IAC5C,OAAOhB,iBAAiB,CAACgB,cAAzB;EACD,CAFM,MAEA,IAAIH,IAAI,IAAIZ,SAAS,CAACgB,QAAtB,EAAgC;IACrC,OAAOjB,iBAAiB,CAACiB,QAAzB;EACD,CAFM,MAEA,IAAIJ,IAAI,IAAIZ,SAAS,CAACiB,uBAAtB,EAA+C;IACpD,OAAOlB,iBAAiB,CAACkB,uBAAzB;EACD,CAFM,MAEA,IAAIL,IAAI,IAAIZ,SAAS,CAACkB,oBAAtB,EAA4C;IACjD,OAAOnB,iBAAiB,CAACmB,oBAAzB;EACD,CAFM,MAEA,IAAIN,IAAI,IAAIZ,SAAS,CAACmB,oBAAtB,EAA4C;IACjD,OAAOpB,iBAAiB,CAACoB,oBAAzB;EACD,CAFM,MAEA,IAAIP,IAAI,IAAIZ,SAAS,CAACoB,uBAAtB,EAA+C;IACpD,OAAOrB,iBAAiB,CAACqB,uBAAzB;EACD,CAFM,MAEA,IAAIR,IAAI,IAAIZ,SAAS,CAACqB,iBAAtB,EAAyC;IAC9C,OAAOtB,iBAAiB,CAACsB,iBAAzB;EACD;;EAED,MAAM,IAAIC,KAAJ,CAAU,yBAAyBV,IAAnC,CAAN;AACD;AAED;AACA;AACA;;;AAoBA;AACA;AACA;IACYW,O;AAaZ;AACA;AACA;;;;WAfYA,O;EAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;EAAAA,O;GAAAA,O,uBAAAA,O;;AAgBL,MAAMC,YAAN,CAAmB;EAExB;AACF;AACA;AACA;AACA;AACA;EACgB,OAAPC,OAAO,CAACC,MAAD,EAA0C;IACtD,OAAOhC,kBAAkB,CAAC+B,OAAnB,CAA2BC,MAA3B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,OAARC,QAAQ,GAAqB;IAClC,OAAOjC,kBAAkB,CAACiC,QAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACqC,OAA5BC,4BAA4B,CAACF,MAAD,EAAoC;IACrEhC,kBAAkB,CAACkC,4BAAnB,CAAgDF,MAAhD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACoC,OAA3BG,2BAA2B,CAACC,OAAD,EAAmB;IACnDpC,kBAAkB,CAACmC,2BAAnB,CAA+CC,OAA/C;EACD;EAED;AACF;AACA;AACA;AACA;;;EACmC,OAA1BC,0BAA0B,GAAqB;IACpD,OAAOrC,kBAAkB,CAACqC,0BAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC2B,OAAlBC,kBAAkB,CAACC,QAAD,EAAwC;IAC/D,OAAOvC,kBAAkB,CAACsC,kBAAnB,CAAsCC,QAAtC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC2B,OAAlBC,kBAAkB,GAAuB;IAC9C,OAAOxC,kBAAkB,CAACwC,kBAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACsB,OAAbC,aAAa,CAACF,QAAD,EAAwC;IAC1D,OAAOvC,kBAAkB,CAACyC,aAAnB,CAAiCF,QAAjC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACuB,OAAdG,cAAc,CAACH,QAAD,EAAwC;IAC3D,OAAOvC,kBAAkB,CAAC0C,cAAnB,CAAkCH,QAAlC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACyB,OAAhBI,gBAAgB,CAACJ,QAAD,EAAwC;IAC7D,OAAOvC,kBAAkB,CAAC2C,gBAAnB,CAAoCJ,QAApC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACoC,OAA3BK,2BAA2B,GAAqB;IACrD,OAAO5C,kBAAkB,CAAC4C,2BAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;;;EAC8B,OAArBC,qBAAqB,GAAG;IAC7B7C,kBAAkB,CAAC6C,qBAAnB;EACD;EAED;AACF;AACA;;;EAC8B,OAArBC,qBAAqB,GAAoB;IAC9C,OAAO9C,kBAAkB,CAAC8C,qBAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC8B,OAArBC,qBAAqB,GAAgC;IAC1D,OAAO/C,kBAAkB,CAAC+C,qBAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACqC,OAA5BC,4BAA4B,CAACC,OAAD,EAAmC;IACpE,IAAIC,sBAASC,EAAT,IAAe,SAAnB,EAA8B;MAC5B,MAAM,IAAIvB,KAAJ,CAAU,mDAAV,CAAN;IACD;;IACD,OAAO5B,kBAAkB,CAACgD,4BAAnB,CAAgDC,OAAhD,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACqB,OAAZG,YAAY,CAACC,SAAD,EAAuC;IACxDrD,kBAAkB,CAACoD,YAAnB,CAAgCC,SAAhC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACqB,OAAZC,YAAY,GAAuC;IACxD,OAAOtD,kBAAkB,CAACsD,YAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,OAANC,MAAM,CAACC,GAAD,EAAc;IACzBxD,kBAAkB,CAACuD,MAAnB,CAA0BC,GAA1B;EACD;EAED;AACF;AACA;AACA;AACA;;;EACkB,OAATC,SAAS,CAACD,GAAD,EAAc;IAC5BxD,kBAAkB,CAACyD,SAAnB,CAA6BD,GAA7B;EACD;EAED;AACF;AACA;AACA;AACA;;;EACgB,OAAPE,OAAO,GAAsB;IAClC,OAAO1D,kBAAkB,CAAC0D,OAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC8B,OAApBC,oBAAoB,CAACC,KAAD,EAAkE;IAC5F,OAAO5D,kBAAkB,CAAC2D,oBAAnB,CAAwCC,KAAxC,aAAwCA,KAAxC,cAAwCA,KAAxC,GAAiD,CAAC,SAAD,CAAjD,CAAP;EACD;EAGD;AACF;AACA;AACA;AACA;;;EAC8B,OAApBC,oBAAoB,GAAmB;IAC7C,OAAO,IAAIC,8BAAJ,CAAoBC,UAAD,IAAqC;MAC7D/D,kBAAkB,CAAC6D,oBAAnB,CAAwCE,UAAxC;IACD,CAFM,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EAC6B,OAApBC,oBAAoB,GAAmB;IAC5C,OAAO,IAAIF,8BAAJ,CAAoBC,UAAD,IAAqC;MAC7D/D,kBAAkB,CAACgE,oBAAnB,CAAwCD,UAAxC;IACD,CAFM,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EAC8B,OAArBE,qBAAqB,GAAoB;IAC9C,OAAO,IAAIC,gCAAJ,CAAqBH,UAAD,IAAsC;MAC/D/D,kBAAkB,CAACiE,qBAAnB,CAAyCF,UAAzC;IACD,CAFM,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EAC8B,OAArBI,qBAAqB,GAAoB;IAC9C,OAAO,IAAID,gCAAJ,CAAqBH,UAAD,IAAsC;MAC/D/D,kBAAkB,CAACmE,qBAAnB,CAAyCJ,UAAzC;IACD,CAFM,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACqC,OAA5BK,4BAA4B,GAA2B;IAC5D,OAAO,IAAIC,8CAAJ,CAA4BC,uBAAD,IAAuD;MACrFtE,kBAAkB,CAACoE,4BAAnB,CAAgDE,uBAAhD;IACH,CAFM,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACqC,OAA5BC,4BAA4B,GAAiC;IAClE,OAAO,IAAIC,0DAAJ,CAAkCF,uBAAD,IAA6D;MACjGtE,kBAAkB,CAACuE,4BAAnB,CAAgDD,uBAAhD;IACH,CAFM,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;;;EACoB,OAAXG,WAAW,CAACC,MAAD,EAAiB;IACjC1E,kBAAkB,CAACyE,WAAnB,CAA+BC,MAA/B;EACD;EAED;AACF;AACA;AACA;AACA;;;EACqB,OAAZC,YAAY,GAAuC;IACxD,OAAO3E,kBAAkB,CAAC2E,YAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC6B,OAApBC,oBAAoB,GAAuC;IAChE,OAAO5E,kBAAkB,CAAC4E,oBAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC4B,OAAnBC,mBAAmB,CAACC,GAAD,EAAcC,EAAd,EAA2B;IACnD/E,kBAAkB,CAAC6E,mBAAnB,CAAuCC,GAAvC,EAA4CC,EAA5C;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACuB,OAAdC,cAAc,CAACC,KAAD,EAA4C;IAC/D,MAAMC,SAAS,GAAG;MAChBC,UAAU,EAAEF,KAAK,CAACG,KADF;MAEhBC,WAAW,EAAEJ,KAAK,CAACK,MAFH;MAGhBC,cAAc,EAAEN,KAAK,CAACO,cAHN;MAIhBC,UAAU,EAAER,KAAK,CAACS;IAJF,CAAlB;IAOA,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;MACtC7F,kBAAkB,CAAC8F,SAAnB,CAA6B,yBAA7B,EAAwDZ,SAAxD,EAAmEa,IAAnE,CAAwE,MAAM;QAC5EH,OAAO,CAAC,IAAD,CAAP;MACD,CAFD,EAEII,KAAD,IAAkB;QACnBH,MAAM,CAACG,KAAD,CAAN;MACD,CAJD;IAKD,CANM,CAAP;EAOD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACkB,OAATF,SAAS,CAACG,IAAD,EAAeC,KAAf,EAA8D;IAC5E,OAAOlG,kBAAkB,CAAC8F,SAAnB,CAA6BG,IAA7B,EAAmCC,KAAnC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACyC,OAAhCC,gCAAgC,CAACC,OAAD,EAA8C;IACnF,IAAIlD,sBAASC,EAAT,IAAe,KAAnB,EAA0B;MACxB,OAAOnD,kBAAkB,CAACmG,gCAAnB,CAAoDC,OAApD,CAAP;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACgC,OAAtBC,sBAAsB,CAACD,OAAD,EAAoC;IAChE,IAAIlD,sBAASC,EAAT,IAAe,KAAnB,EAA0B;MACxB,OAAOnD,kBAAkB,CAACqG,sBAAnB,CAA0CD,OAA1C,CAAP;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACoB,OAAXE,WAAW,CAACC,SAAD,EAAuBC,QAAvB,EAAwE;IACxFrG,YAAY,CAACmG,WAAb,CAAyBrF,gBAAgB,CAACsF,SAAD,CAAzC,EAAsDC,QAAtD;IACA,OAAO,IAAI3F,YAAJ,CAAiB,MAAM;MAC5BiB,YAAY,CAAC2E,cAAb,CAA4BF,SAA5B,EAAuCC,QAAvC;IACD,CAFM,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACuB,OAAdC,cAAc,CAACF,SAAD,EAAuBC,QAAvB,EAA0D;IAC7ErG,YAAY,CAACsG,cAAb,CAA4BxF,gBAAgB,CAACsF,SAAD,CAA5C,EAAyDC,QAAzD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EAC2B,OAAlBE,kBAAkB,CAACH,SAAD,EAAuB;IAC9CpG,YAAY,CAACuG,kBAAb,CAAgCzF,gBAAgB,CAACsF,SAAD,CAAhD;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC4B,OAAnBI,mBAAmB,CAACvE,OAAD,EAAmB;IAC3C,IAAIc,sBAASC,EAAT,IAAe,KAAnB,EAA0B;MACxBnD,kBAAkB,CAAC2G,mBAAnB,CAAuCvE,OAAvC;IACD,CAFD,MAEO;MACLwE,OAAO,CAACC,GAAR,CAAY,iDAAZ;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EAC2B,OAAlBC,kBAAkB,GAAqB;IAC5C,IAAI5D,sBAASC,EAAT,IAAe,KAAnB,EAA0B;MACxB,OAAOnD,kBAAkB,CAAC8G,kBAAnB,EAAP;IACD,CAFD,MAEO;MACLF,OAAO,CAACC,GAAR,CAAY,iDAAZ;MACA,OAAO,IAAIlB,OAAJ,CAAYC,OAAO,IAAIA,OAAO,CAAC,KAAD,CAA9B,CAAP;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACuB,OAAdmB,cAAc,CAACC,WAAD,EAAsB;IACzC,IAAI9D,sBAASC,EAAT,IAAe,KAAnB,EAA0B;MACxBnD,kBAAkB,CAAC+G,cAAnB,CAAkCC,WAAlC;IACD,CAFD,MAEO;MACLJ,OAAO,CAACC,GAAR,CAAY,iDAAZ;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;;;EACuB,OAAdI,cAAc,GAAoB;IACvC,IAAI/D,sBAASC,EAAT,IAAe,KAAnB,EAA0B;MACxByD,OAAO,CAACC,GAAR,CAAY,iDAAZ;IACD;;IACD,OAAO7G,kBAAkB,CAACiH,cAAnB,EAAP;EACD;EAED;AACF;AACA;;;EAC6B,OAApBC,oBAAoB,GAAG;IAC5BlH,kBAAkB,CAACkH,oBAAnB;EACD;EAED;AACF;AACA;;;EAC6B,OAApBC,oBAAoB,GAAG;IAC5BnH,kBAAkB,CAACmH,oBAAnB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACuB,OAAdC,cAAc,CAACC,SAAD,EAAsC;IACzD,OAAOrH,kBAAkB,CAACoH,cAAnB,CAAkCC,SAAlC,CAAP;EACD;EAED;AACF;AACA;;;EACuB,OAAdC,cAAc,GAAG;IACtBtH,kBAAkB,CAACsH,cAAnB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACyB,OAAhBC,gBAAgB,GAA4B;IACjD,OAAOvH,kBAAkB,CAACuH,gBAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC2B,OAAlBC,kBAAkB,CAACH,SAAD,EAAsC;IAC7D,OAAOrH,kBAAkB,CAACwH,kBAAnB,CAAsCH,SAAtC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC6B,OAApBI,oBAAoB,CAACJ,SAAD,EAAsC;IAC/D,OAAOrH,kBAAkB,CAACyH,oBAAnB,CAAwCJ,SAAxC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACqB,OAAZK,YAAY,GAAqB;IACtC,OAAO1H,kBAAkB,CAAC0H,YAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC0C,OAAjCC,iCAAiC,CAACvF,OAAD,EAAmB;IACzDpC,kBAAkB,CAAC2H,iCAAnB,CAAqDvF,OAArD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACyB,OAAhBwF,gBAAgB,CAACC,gBAAD,EAA2B;IAChD7H,kBAAkB,CAAC4H,gBAAnB,CAAoCC,gBAApC;EACD;EAED;AACF;AACA;AACA;;;EACyB,OAAhBC,gBAAgB,GAAoB;IACzC,OAAO9H,kBAAkB,CAAC8H,gBAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;;;EACoB,OAAXC,WAAW,GAAG;IACnB/H,kBAAkB,CAAC+H,WAAnB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EAC+B,OAAtBC,sBAAsB,GAA2B;IACtD,OAAOhI,kBAAkB,CAACgI,sBAAnB,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC2B,OAAlBC,kBAAkB,GAAG;IAC1BjI,kBAAkB,CAACiI,kBAAnB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC0B,OAAjBC,iBAAiB,CAACC,UAAD,EAAqB;IAC3CnI,kBAAkB,CAACkI,iBAAnB,CAAqCC,UAArC;EACD;EAED;AACF;AACA;AACA;AACA;;;EAC0C,OAAjCC,iCAAiC,CAACC,OAAD,EAAkB;IACxDrI,kBAAkB,CAACoI,iCAAnB,CAAqDC,OAArD;EACD;;EAE6B,OAAvBC,uBAAuB,CAACC,kBAAD,EAA6B;IACzDvI,kBAAkB,CAACsI,uBAAnB,CAA2CC,kBAA3C;EACD;;EAE+B,OAAzBC,yBAAyB,CAACD,kBAAD,EAAwD;IACtF,OAAOvI,kBAAkB,CAACwI,yBAAnB,CAA6CD,kBAA7C,CAAP;EACD;;EAEoC,OAA9BE,8BAA8B,CAACC,WAAD,EAAuBH,kBAAvB,EAAmD;IACtFvI,kBAAkB,CAACyI,8BAAnB,CAAkDC,WAAlD,EAA+DH,kBAA/D;EACD;;AA1mBuB"}