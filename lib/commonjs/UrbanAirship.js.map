{"version":3,"names":["UrbanAirshipModule","NativeModules","UrbanAirshipReactModule","EventEmitter","UAEventEmitter","InternalEventType","EventType","SubscriptionScope","NotificationOption","ForegroundPresentationOption","AuthorizedNotificationSetting","AuthorizedNotificationStatus","iOS","Subscription","constructor","onRemove","remove","convertEventEnum","type","NotificationResponse","PushReceived","ChannelCreated","DeepLink","NotificationOptInStatus","MessageCenterUpdated","DisplayMessageCenter","DisplayPreferenceCenter","PushTokenReceived","Error","Feature","UrbanAirship","takeOff","config","isFlying","setAndroidNotificationConfig","setUserNotificationsEnabled","enabled","isUserNotificationsEnabled","setEnabledFeatures","features","getEnabledFeatures","enableFeature","disableFeature","isFeatureEnabled","enableUserPushNotifications","enableChannelCreation","getUnreadMessageCount","getNotificationStatus","getNotificationChannelStatus","channel","Platform","OS","setNamedUser","namedUser","getNamedUser","addTag","tag","removeTag","getTags","getSubscriptionLists","types","editContactTagGroups","TagGroupEditor","operations","editChannelTagGroups","editChannelAttributes","AttributeEditor","editContactAttributes","editChannelSubscriptionLists","SubscriptionListEditor","subscriptionListUpdates","editContactSubscriptionLists","ScopedSubscriptionListEditor","trackScreen","screen","getChannelId","getRegistrationToken","associateIdentifier","key","id","addCustomEvent","event","actionArg","event_name","_name","event_value","_value","transaction_id","_transactionId","properties","_properties","Promise","resolve","reject","runAction","then","error","name","value","setForegroundPresentationOptions","options","setNotificationOptions","addListener","eventType","listener","removeListener","removeAllListeners","setAutobadgeEnabled","console","log","isAutobadgeEnabled","setBadgeNumber","badgeNumber","getBadgeNumber","displayMessageCenter","dismissMessageCenter","displayMessage","messageId","dismissMessage","getInboxMessages","deleteInboxMessage","markInboxMessageRead","refreshInbox","setAutoLaunchDefaultMessageCenter","setCurrentLocale","localeIdentifier","getCurrentLocale","clearLocale","getActiveNotifications","clearNotifications","clearNotification","identifier","setInAppAutomationDisplayInterval","seconds","displayPreferenceCenter","preferenceCenterId","getPreferenceCenterConfig","setUseCustomPreferenceCenterUi","useCustomUi"],"sources":["UrbanAirship.ts"],"sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict'\n\nimport { NativeModules, Platform } from \"react-native\"\n\nimport { CustomEvent } from \"./CustomEvent\";\nimport { TagGroupEditor, TagGroupOperation } from \"./TagGroupEditor\";\nimport { AttributeEditor, AttributeOperation } from \"./AttributeEditor\";\nimport { UAEventEmitter } from \"./UAEventEmitter\";\nimport { SubscriptionListEditor, SubscriptionListUpdate} from \"./SubscriptionListEditor\";\nimport { ScopedSubscriptionListEditor, ScopedSubscriptionListUpdate} from \"./ScopedSubscriptionListEditor\";\nimport { JsonObject, JsonValue } from \"./Json\";\nimport { SubscriptionLists, SubscriptionListType } from \"./SubscriptionLists\";\nimport { PreferenceCenter } from './PreferenceCenter';\n\n/**\n * @hidden\n */\nconst UrbanAirshipModule = NativeModules.UrbanAirshipReactModule\n\n/**\n * @hidden\n */\nconst EventEmitter = new UAEventEmitter()\n\n/**\n * Enum of internal event type names used by UAEventEmitter\n * @hidden\n */\nenum InternalEventType {\n  ChannelCreated = \"com.airship.channel_created\",\n  NotificationResponse = \"com.airship.notification_response\",\n  PushReceived = \"com.airship.push_received\",\n  DeepLink = \"com.airship.deep_link\",\n  MessageCenterUpdated = \"com.airship.message_center_updated\",\n  NotificationOptInStatus = \"com.airship.notification_opt_in_status\",\n  DisplayMessageCenter = \"com.airship.display_message_center\",\n  DisplayPreferenceCenter = \"com.airship.display_preference_center\",\n  PushTokenReceived = \"com.airship.push_token_received\"\n}\n\n/**\n * Enum of event type names.\n */\nexport enum EventType {\n  /**\n   * Notification response event. On Android, this event will be dispatched\n   * in the background for background notifications actions.\n   */\n  NotificationResponse = \"notification_response\",\n  /**\n   * Push received event. On Android, this event will only be dispatched\n   * in the background if the app is able to start a service or by sending a\n   * high priority FCM message.\n   */\n  PushReceived = \"push_received\",\n  /**\n   * Channel created event.\n   */\n  ChannelCreated = \"channel_created\",\n  /**\n   * Deep link event.\n   */\n  DeepLink = \"deep_link\",\n  /**\n   * Notification opt-in status event.\n   */\n  NotificationOptInStatus = \"notification_opt_in_status\",\n  /**\n   * Message Center updated event.\n   */\n  MessageCenterUpdated = \"message_center_updated\",\n  /**\n   * Display Message Center event.\n   */\n  DisplayMessageCenter = \"display_message_center\",\n  /**\n   * Display preference center event.\n   */\n  DisplayPreferenceCenter = \"display_preference_center\",\n  /**\n   * Push token received.\n   */\n  PushTokenReceived = \"push_token_received\",\n}\n\n/**\n * Inbox message object.\n */\nexport interface InboxMessage {\n  /**\n   * The message ID. Needed to display, mark as read, or delete the message.\n   */\n  id: string\n  /**\n   * The message title.\n   */\n  title: string\n  /**\n   * The message sent date in milliseconds.\n   */\n  sentDate: number\n  /**\n   * Optional - The icon url for the message.\n   */\n  listIconUrl: string\n  /**\n   * The unread / read status of the message.\n   */\n  isRead: boolean\n  /**\n   * The deleted status of the message.\n   */\n  isDeleted: boolean\n  /**\n   * String to String map of any message extras.\n   */\n  extras: Record<string, string>\n}\n\n/**\n * Event fired when a push is received.\n */\nexport interface PushReceivedEvent {\n  pushPayload: PushPayload \n}\n\n/**\n * The push payload.\n */\n export interface PushPayload {\n  /**\n   * The alert.\n   */\n  alert?: string\n  /**\n   * The title.\n   */\n  title?: string\n  /**\n   * The notification ID.\n   */\n  notificationId?: string\n  /**\n   * The notification extras.\n   */\n  extras: JsonObject\n}\n\n/**\n * Event fired when the user initiates a notification response.\n */\nexport interface NotificationResponseEvent {\n  /**\n   * The push notification.\n   */\n  pushPayload: PushPayload\n  \n  /**\n   * The action button ID, if available.\n   */\n  actionId?: string\n  \n  /**\n   * Indicates whether the response was a foreground action.\n   * This value is always if the user taps the main notification,\n   * otherwise it is defined by the notification action button.\n   */\n  isForeground: boolean\n}\n\n/**\n * Airship config environment\n */\nexport interface ConfigEnvironment {\n  /**\n   * App key.\n   */\n  appKey: string\n\n  /**\n   * App secret.\n   */\n  appSecret: string\n\n  /**\n   * Optional log level.\n   */\n  logLevel?: LogLevel\n}\n\n/**\n * Possible sites.\n */\nexport type Site = \"us\" | \"eu\";\n\n/**\n * Log levels.\n */\nexport type LogLevel = \"verbose\" | \"debug\" | \"info\" | \"warning\" | \"error\" | \"none\";\n\n/**\n * Airship config\n */\nexport interface AirshipConfig {\n  /**\n   * Default environment.\n   */\n  default?: ConfigEnvironment,\n\n  /**\n   * Development environment. Overrides default environment if inProduction is false.\n   */\n  development?: ConfigEnvironment,\n\n  /**\n   * Production environment. Overrides default environment if inProduction is true.\n   */\n  production?: ConfigEnvironment,\n\n  /**\n   * Cloud site.\n   */\n  site?: Site\n\n  /**\n   * Switches the environment from development or production. If the value is not\n   * set, Airship will determine the value at runtime.\n   */\n  inProduction?: boolean,\n\n  /**\n   * URL allow list.\n   */\n  urlAllowList?: string[],\n\n  /**\n   * URL allow list for open URL scope.\n   */\n  urlAllowListScopeOpenUrl?: string[],\n\n  /**\n   * URL allow list for JS bridge injection.\n   */\n  urlAllowListScopeJavaScriptInterface?: string[],\n\n  /**\n   * Enables delayed channel creation.\n   */\n  isChannelCreationDelayEnabled?: boolean,\n\n  /**\n   * Initial config URL for custom Airship domains. The URL\n   * should also be added to the urlAllowList.\n   */\n  initialConfigUrl?: String,\n\n  /**\n   * Enabled features. Defaults to all.\n   */\n  enabledFeatures?: Feature[],\n\n  /**\n   * iOS config.\n   */\n  ios?: {\n    /**\n     * itunesId for rate app and app store deep links.\n     */\n    itunesId?: string\n  },\n\n  /**\n   * Android config.\n   */\n  android?: {\n    /**\n     * App store URI\n     */\n    appStoreUri?: string,\n\n    /**\n     * Fcm app name if using multiple FCM projects.\n     */\n    fcmFirebaseAppName?: string,\n    \n    /**\n     * Notification config.\n     */\n    notificationConfig?: NotificationConfigAndroid\n  }\n}\n\n/**\n * Subscription Scope types.\n */\n export enum SubscriptionScope {\n  App = \"app\",\n  Web = \"web\",\n  Sms = \"sms\",\n  Email = \"email\"\n}\n\n/**\n * iOS options\n */\nexport namespace iOS {\n\n  /**\n   * Enum of notification options. iOS only.\n   */\n  export enum NotificationOption {\n    /**\n     * Alerts.\n     */\n    Alert = \"alert\",\n    /**\n     * Sounds.\n     */\n    Sound = \"sound\",\n    /**\n     * Badges.\n     */\n    Badge = \"badge\",\n    /**\n     * Car play.\n     */\n    CarPlay = \"car_play\",\n    /**\n     * Critical Alert.\n     */\n    CriticalAlert = \"critical_alert\",\n    /**\n     * Provides app notification settings.\n     */\n    ProvidesAppNotificationSettings = \"provides_app_notification_settings\",\n    /**\n     * Provisional.\n     */\n    Provisional = \"provisional\"\n  }\n\n  /**\n   * Enum of foreground notification options.\n   */\n  export enum ForegroundPresentationOption {\n    /**\n     * Play the sound associated with the notification.\n     */\n    Sound = \"sound\",\n    /**\n     * Apply the notification's badge value to the app’s icon.\n     */\n    Badge = \"badge\",\n\n    /**\n     * Show the notification in Notification Center. On iOS 13 an older,\n     * this will also show the notification as a banner.\n     */\n    List = \"list\",\n    \n     /**\n     * Present the notification as a banner. On iOS 13 an older,\n     * this will also show the notification in the Notification Center.\n     */\n    Banner = \"banner\"\n  }\n\n  /**\n   * Enum of authorized notification settings.\n   */\n  export enum AuthorizedNotificationSetting {\n    /**\n     * Alerts.\n     */\n    Alert = \"alert\",\n    /**\n     * Sounds.\n     */\n    Sound = \"sound\",\n    /**\n     * Badges.\n     */\n    Badge = \"badge\",\n    /**\n     * CarPlay.\n     */\n    CarPlay = \"car_play\",\n    /**\n     * Lock screen.\n     */\n    LockScreen = \"lock_screen\",\n    /**\n     * Notification center.\n     */\n    NotificationCenter = \"notification_center\",\n    /**\n     * Critical alert.\n     */\n    CriticalAlert = \"critical_alert\",\n    /**\n     * Announcement.\n     */\n    Announcement = \"announcement\",\n    /**\n     * Scheduled delivery.\n     */\n    ScheduledDelivery = \"scheduled_delivery\",\n    /**\n    * Time sensitive.\n    */\n    TimeSensitive = \"time_sensitive\"\n  }\n\n  /**\n   * Enum of authorized status.\n   */\n   export enum AuthorizedNotificationStatus {\n    /**\n     * Not determined.\n     */\n    NotDetermined = \"not_determined\",\n    \n    /**\n     * Denied.\n     */\n    Denied = \"denied\",\n    \n    /**\n     * Authorized.\n     */\n    Authorized = \"authorized\",\n    \n    /**\n     * Provisional.\n     */\n    Provisional = \"provisional\",\n\n    /**\n     * Ephemeral.\n     */\n    Ephemeral = \"ephemeral\"\n  }\n}\n\n\nexport interface NotificationStatus {\n  /**\n   * If airship is opted in for push notifications are not.\n   */\n  airshipOptIn: boolean\n\n  /**\n   * If notifications are enabled on Airship or not.\n   */\n  airshipEnabled: boolean\n\n  /**\n   * If notifications are enabled in the app settings or not.\n   */\n  systemEnabled: boolean\n\n  /**\n   * iOS status.\n   */\n  ios?: {\n    /**\n     * Authorized settings.\n     */\n    authorizedSettings: [iOS.AuthorizedNotificationSetting],\n\n    /**\n     * Authorized status.\n     */\n    authorizedStatus: iOS.AuthorizedNotificationStatus\n  }\n}\n\n/**\n * Event fired when the notification opt-in status changes.\n */\nexport interface NotificationOptInStatusEvent {\n  /**\n   * Whether the user is opted in to notifications.\n   */\n  optIn: boolean\n\n  /**\n   * The authorized notification settings. iOS only.\n   */\n  authorizedSettings?: [iOS.AuthorizedNotificationSetting]\n}\n\n/**\n * Event fired when the Message Center  is updated.\n */\nexport interface MessageCenterUpdatedEvent {\n  /**\n   * The unread message count.\n   */\n  messageUnreadCount: number\n  /**\n   * The total message count.\n   */\n  messageCount: number\n}\n\n/**\n * Event fired when the Message Center is requested to be displayed.\n */\nexport interface DisplayMessageCenterEvent {\n  /**\n   * The message ID, if available.\n   */\n  messageId?: string\n}\n\n/**\n * Event fired when a deep link is opened.\n */\nexport interface DeepLinkEvent {\n  /**\n   * The deep link string.\n   */\n  deepLink: string\n}\n\n/**\n * Event fired when a preference center is requested to be displayed.\n */\n export interface DisplayPreferenceCenterEvent {\n  /**\n   * The preference center Id.\n   */\n  preferenceCenterId: string\n}\n\n\n/**\n * A listener subscription.\n */\nexport class Subscription {\n  onRemove: () => void\n  constructor(onRemove: () => void) {\n    this.onRemove = onRemove\n  }\n  /**\n   * Removes the listener.\n   */\n  remove(): void {\n    this.onRemove()\n  }\n}\n\n/**\n * Event fired when a channel registration occurs.\n */\nexport interface ChannelCreatedEvent {\n  /**\n   * The channel ID.\n   */\n  channelId: string\n}\n\nexport interface PushTokenReceivedEvent {\n  /**\n  * The push token.\n  */\n  pushToken: string\n}\n\n/**\n * Converts between public and internal event types.\n * @hidden\n */\nfunction convertEventEnum(type: EventType): string {\n  if (type === EventType.NotificationResponse) {\n    return InternalEventType.NotificationResponse\n  } else if (type === EventType.PushReceived) {\n    return InternalEventType.PushReceived\n  } else if (type === EventType.ChannelCreated) {\n    return InternalEventType.ChannelCreated\n  } else if (type == EventType.DeepLink) {\n    return InternalEventType.DeepLink\n  } else if (type == EventType.NotificationOptInStatus) {\n    return InternalEventType.NotificationOptInStatus\n  } else if (type == EventType.MessageCenterUpdated) {\n    return InternalEventType.MessageCenterUpdated\n  } else if (type == EventType.DisplayMessageCenter) {\n    return InternalEventType.DisplayMessageCenter\n  } else if (type == EventType.DisplayPreferenceCenter) {\n    return InternalEventType.DisplayPreferenceCenter\n  } else if (type == EventType.PushTokenReceived) {\n    return InternalEventType.PushTokenReceived\n  }\n\n  throw new Error(\"Invalid event name: \" + type)\n}\n\n/**\n * Android notification config.\n */\nexport interface NotificationConfigAndroid {\n  /**\n   * The icon resource name.\n   */\n  icon?: string\n  /**\n   * The large icon resource name.\n   */\n  largeIcon?: string\n  /**\n   * The default android notification channel ID.\n   */\n  defaultChannelId?: string\n  /**\n   * The accent color. Must be a hex value #AARRGGBB.\n   */\n  accentColor?: string\n}\n\n/**\n * Enum of authorized Features.\n */\nexport enum Feature {\n  None = \"none\",\n  InAppAutomation = \"in_app_automation\",\n  MessageCenter = \"message_center\",\n  Push = \"push\",\n  Chat = \"chat\",\n  Analytics = \"analytics\",\n  TagsAndAttributes = \"tags_and_attributes\",\n  Contacts = \"contacts\",\n  Location = \"location\",\n  All = \"all\"\n}\n\n/**\n* The main Airship API.\n*/\nexport class UrbanAirship {\n\n  /**\n   * Calls takeOff. If Airship is already initialized the new config will be applied on next app init.\n   *\n   * @param config The airship config.\n   * @return A promise with the result. The result will be true if Airship is initialized, otherwise false.\n   */\n  static takeOff(config: AirshipConfig): Promise<boolean> {\n    return UrbanAirshipModule.takeOff(config)\n  }\n\n  /**\n   * Checks if Airship is initialized.\n   *\n   * @return A promise with the result. The result will be true if Airship is initialized, otherwise false.\n   */\n  static isFlying(): Promise<boolean> {\n    return UrbanAirshipModule.isFlying()\n  }\n  \n  /**\n   * Sets the Android notification config. Values not set will fallback to any values set in the airship config options.\n   *\n   * @param config The notification config object.\n   */\n  static setAndroidNotificationConfig(config: NotificationConfigAndroid) {\n    UrbanAirshipModule.setAndroidNotificationConfig(config)\n  }\n\n  /**\n   * Sets user notifications enabled. The first time user notifications are enabled\n   * on iOS, it will prompt the user for notification permissions.\n   *\n   * @param enabled true to enable notifications, false to disable.\n   */\n  static setUserNotificationsEnabled(enabled: boolean) {\n    UrbanAirshipModule.setUserNotificationsEnabled(enabled)\n  }\n\n  /**\n   * Checks if user notifications are enabled or not.\n   *\n   * @return A promise with the result.\n   */\n  static isUserNotificationsEnabled(): Promise<boolean> {\n    return UrbanAirshipModule.isUserNotificationsEnabled()\n  }\n\n  /**\n   * Sets the SDK features that will be enabled. The rest of the features will be disabled.\n   * \n   * If all features are disabled the SDK will not make any network requests or collect data.\n   *\n   * @note All features are enabled by default.\n   * @param feature An array of `Features` to enable.\n   * @return A promise that returns true if the enablement was authorized.\n   */\n  static setEnabledFeatures(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.setEnabledFeatures(features)\n  }\n\n  /**\n   * Gets a Feature array with the enabled features.\n   * \n   * @return A promise that returns the enabled features as a Feature array.\n   */\n  static getEnabledFeatures(): Promise<Feature[]> {\n    return UrbanAirshipModule.getEnabledFeatures()\n  }\n\n  /**\n   * Enables one or many features.\n   *\n   * @param feature An array of `Feature` to enable.\n   * @return A promise that returns true if the enablement was authorized.\n   */\n  static enableFeature(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.enableFeature(features)\n  }\n\n  /**\n   * Disables one or many features.\n   *\n   * @param feature An array of `Feature` to disable.\n   * @return A promise that returns true if the disablement was authorized.\n   */\n  static disableFeature(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.disableFeature(features)\n  }\n\n  /**\n   * Checks if a given feature is enabled or not.\n   *\n   * @return A promise that returns true if the features are enabled, false otherwise.\n   */\n  static isFeatureEnabled(features: Feature[]): Promise<boolean> {\n    return UrbanAirshipModule.isFeatureEnabled(features)\n  }\n\n  /**\n   * Enables user notifications.\n   *\n   * @return A promise that returns true if enablement was authorized\n   * or false if enablement was rejected\n   */\n  static enableUserPushNotifications(): Promise<boolean> {\n    return UrbanAirshipModule.enableUserPushNotifications()\n  }\n\n  /**\n   * Enables channel creation if `channelCreationDelayEnabled` was\n   * enabled in the config.\n   */\n  static enableChannelCreation() {\n    UrbanAirshipModule.enableChannelCreation()\n  }\n\n  /**\n   * Gets the count of Unread messages in the inbox.\n   */\n  static getUnreadMessageCount(): Promise<number> {\n    return UrbanAirshipModule.getUnreadMessageCount();\n  }\n\n  /**\n   * Gets the notification status for the app.\n   *\n   * @return A promise with the result.\n   */\n  static getNotificationStatus(): Promise<NotificationStatus> {\n    return UrbanAirshipModule.getNotificationStatus()\n  }\n\n  /**\n   * Gets the status of the specified Notification Channel.\n   * This method is only supported on Android. iOS will throw an error.\n   *\n   * @param channel The channel's name.\n   * @return A promise with the result.\n   */\n  static getNotificationChannelStatus(channel: string): Promise<string> {\n    if (Platform.OS != 'android') {\n      throw new Error(\"This method is only supported on Android devices.\")\n    }\n    return UrbanAirshipModule.getNotificationChannelStatus(channel)\n  }\n\n  /**\n   * Sets the named user.\n   *\n   * @param namedUser The named user string, or null/undefined to clear the named user.\n   */\n  static setNamedUser(namedUser: string | null | undefined) {\n    UrbanAirshipModule.setNamedUser(namedUser)\n  }\n\n  /**\n   * Gets the named user.\n   *\n   * @return A promise with the result.\n   */\n  static getNamedUser(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getNamedUser()\n  }\n\n  /**\n   * Adds a channel tag.\n   *\n   * @param tag A channel tag.\n   */\n  static addTag(tag: string) {\n    UrbanAirshipModule.addTag(tag)\n  }\n\n  /**\n   * Removes a channel tag.\n   *\n   * @param tag A channel tag.\n   */\n  static removeTag(tag: string) {\n    UrbanAirshipModule.removeTag(tag)\n  }\n\n  /**\n   * Gets the channel tags.\n   *\n   * @return A promise with the result.\n   */\n  static getTags(): Promise<string[]> {\n    return UrbanAirshipModule.getTags()\n  }\n\n  /**\n   * Gets the subscription lists.\n   *\n   * @param types The types of subscription lists. Values: `channel`, `contact` (default: [`channel`]).\n   * @return A promise with the result.\n   */\n   static getSubscriptionLists(types?: [...SubscriptionListType[]]): Promise<SubscriptionLists> {\n    return UrbanAirshipModule.getSubscriptionLists(types ?? ['channel']);\n  }\n\n\n  /**\n   * Creates an editor to modify the contact tag groups.\n   *\n   * @return A tag group editor instance.\n   */\n   static editContactTagGroups(): TagGroupEditor {\n    return new TagGroupEditor((operations: TagGroupOperation[]) => {\n      UrbanAirshipModule.editContactTagGroups(operations)\n    })\n  }\n\n  /**\n   * Creates an editor to modify the channel tag groups.\n   *\n   * @return A tag group editor instance.\n   */\n  static editChannelTagGroups(): TagGroupEditor {\n    return new TagGroupEditor((operations: TagGroupOperation[]) => {\n      UrbanAirshipModule.editChannelTagGroups(operations)\n    })\n  }\n\n  /**\n   * Creates an editor to modify the channel attributes.\n   *\n   * @return An attribute editor instance.\n   */\n  static editChannelAttributes(): AttributeEditor {\n    return new AttributeEditor((operations: AttributeOperation[]) => {\n      UrbanAirshipModule.editChannelAttributes(operations)\n    })\n  }\n\n  /**\n   * Creates an editor to modify the contact attributes.\n   *\n   * @return An attribute editor instance.\n   */\n  static editContactAttributes(): AttributeEditor {\n    return new AttributeEditor((operations: AttributeOperation[]) => {\n      UrbanAirshipModule.editContactAttributes(operations)\n    })\n  }\n\n  /**\n   * Edit the subscription lists associated with the current Channel.\n   *\n   * @return A promise with the result.\n   */\n  static editChannelSubscriptionLists(): SubscriptionListEditor {\n    return new SubscriptionListEditor((subscriptionListUpdates: SubscriptionListUpdate[]) => {\n        UrbanAirshipModule.editChannelSubscriptionLists(subscriptionListUpdates)\n    })\n  }\n\n  /**\n   * Edit the subscription lists associated with the current Contact.\n   *\n   * @return A promise with the result.\n   */\n  static editContactSubscriptionLists(): ScopedSubscriptionListEditor {\n    return new ScopedSubscriptionListEditor((subscriptionListUpdates: ScopedSubscriptionListUpdate[]) => {\n        UrbanAirshipModule.editContactSubscriptionLists(subscriptionListUpdates)\n    })\n  }\n  \n  /**\n   * Initiates screen tracking for a specific app screen, must be called once per tracked screen.\n   *\n   * @param screen The screen's string identifier\n   */\n  static trackScreen(screen: string) {\n    UrbanAirshipModule.trackScreen(screen)\n  }\n\n  /**\n   * Gets the channel ID.\n   *\n   * @return A promise with the result.\n   */\n  static getChannelId(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getChannelId()\n  }\n\n  /**\n   * Gets the registration token.\n   *\n   * @return A promise with the result. The registration token might be undefined\n   * if registration is currently in progress, if the app is not setup properly\n   * for remote notifications, if running on an iOS simulator, or if running on\n   * an Android device that has an outdated or missing version of Google Play Services.\n   */\n  static getRegistrationToken(): Promise<string | null | undefined> {\n    return UrbanAirshipModule.getRegistrationToken()\n  }\n\n  /**\n   * Associates an identifier for the Connect data stream.\n   *\n   * @param key The identifier's key.\n   * @param id The identifier's id, or null/undefined to clear.\n   */\n  static associateIdentifier(key: string, id?: string) {\n    UrbanAirshipModule.associateIdentifier(key, id)\n  }\n\n  /**\n   * Adds a custom event.\n   *\n   * @param event The custom event.\n   * @return A promise that returns null if resolved, or an Error if the\n   * custom event is rejected.\n   */\n  static addCustomEvent(event: CustomEvent): Promise<null | Error> {\n    const actionArg = {\n      event_name: event._name,\n      event_value: event._value,\n      transaction_id: event._transactionId,\n      properties: event._properties\n    }\n\n    return new Promise((resolve, reject) => {\n      UrbanAirshipModule.runAction(\"add_custom_event_action\", actionArg).then(() => {\n        resolve(null)\n      }, (error: Error) => {\n        reject(error)\n      })\n    })\n  }\n\n  /**\n   * Runs an Urban Airship action.\n   *\n   * @param name The name of the action.\n   * @param value The action's value.\n   * @return A promise that returns the action result if the action\n   * successfully runs, or the Error if the action was unable to be run.\n   */\n  static runAction(name: string, value?: JsonValue): Promise<JsonValue | Error> {\n    return UrbanAirshipModule.runAction(name, value)\n  }\n\n  /**\n   * Sets the foreground presentation options for iOS.\n   * This method is only supported on iOS. Android will no-op.\n   *\n   * @param options The array of foreground presentation options.\n   */\n  static setForegroundPresentationOptions(options: [iOS.ForegroundPresentationOption]) {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.setForegroundPresentationOptions(options)\n    }\n  }\n\n  /**\n   * Sets the notification options for iOS.\n   * This method is only supported on iOS. Android will no-op.\n   *\n   * @param options The array of notification options.\n   */\n   static setNotificationOptions(options: [iOS.NotificationOption]) {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.setNotificationOptions(options)\n    }\n  }\n\n  /**\n   * Adds a listener for an Urban Airship event.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Registration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   * @param listener The event listener.\n   * @return A subscription.\n   */\n  static addListener(eventType: EventType, listener: (...args: any[]) => any): Subscription {\n    EventEmitter.addListener(convertEventEnum(eventType), listener)\n    return new Subscription(() => {\n      UrbanAirship.removeListener(eventType, listener)\n    })\n  }\n\n  /**\n   * Removes a listener for an Urban Airship event.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Registration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   * @param listener The event listener. Should be a reference to the function passed into addListener.\n   */\n  static removeListener(eventType: EventType, listener: (...args: any[]) => any) {\n    EventEmitter.removeListener(convertEventEnum(eventType), listener)\n  }\n\n  /**\n   * Removes all listeners for Urban Airship events.\n   *\n   * @param eventType The event type. Either EventType.NotificationResponse, EventType.PushReceived,\n   * EventType.Register, EventType.Registration, EventType.DeepLink, EventType.NotificationOptInStatus,\n   * EventType.InboxUpdated, or EventType.ShowInbox.\n   */\n  static removeAllListeners(eventType: EventType) {\n    EventEmitter.removeAllListeners(convertEventEnum(eventType))\n  }\n\n  /**\n   * Enables or disables autobadging on iOS. Badging is not supported for Android.\n   *\n   * @param enabled Whether or not to enable autobadging.\n   */\n  static setAutobadgeEnabled(enabled: boolean) {\n    if (Platform.OS == 'ios') {\n      UrbanAirshipModule.setAutobadgeEnabled(enabled)\n    } else {\n      console.log(\"This feature is not supported on this platform.\")\n    }\n  }\n\n  /**\n   * Checks to see if autobadging on iOS is enabled. Badging is not supported for Android.\n   *\n   * @return A promise with the result, either true or false.\n   */\n  static isAutobadgeEnabled(): Promise<boolean> {\n    if (Platform.OS == 'ios') {\n      return UrbanAirshipModule.isAutobadgeEnabled()\n    } else {\n      console.log(\"This feature is not supported on this platform.\")\n      return new Promise(resolve => resolve(false))\n    }\n  }\n\n  /**\n   * Sets the badge number for iOS. Badging is not supported for Android.\n   *\n   * @param badgeNumber The badge number.\n   */\n  static setBadgeNumber(badgeNumber: number) {\n    if (Platform.OS == 'ios') {\n      UrbanAirshipModule.setBadgeNumber(badgeNumber)\n    } else {\n      console.log(\"This feature is not supported on this platform.\")\n    }\n  }\n\n  /**\n   * Gets the current badge number for iOS. Badging is not supported for Android\n   * and this method will always return 0.\n   *\n   * @return A promise with the result.\n   */\n  static getBadgeNumber(): Promise<number> {\n    if (Platform.OS != 'ios') {\n      console.log(\"This feature is not supported on this platform.\")\n    }\n    return UrbanAirshipModule.getBadgeNumber()\n  }\n\n  /**\n   * Displays the default message center.\n   */\n  static displayMessageCenter() {\n    UrbanAirshipModule.displayMessageCenter()\n  }\n\n  /**\n   * Dismisses the default message center.\n   */\n  static dismissMessageCenter() {\n    UrbanAirshipModule.dismissMessageCenter()\n  }\n\n  /**\n   * Displays an inbox message.\n   *\n   * @param messageId The id of the message to be displayed.\n   * @return A promise with the result.\n   */\n  static displayMessage(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.displayMessage(messageId)\n  }\n\n  /**\n   * Dismisses the currently displayed inbox message.\n   */\n  static dismissMessage() {\n    UrbanAirshipModule.dismissMessage()\n  }\n\n  /**\n   * Retrieves the current inbox messages.\n   *\n   * @return A promise with the result.\n   */\n  static getInboxMessages(): Promise<InboxMessage[]> {\n    return UrbanAirshipModule.getInboxMessages()\n  }\n\n  /**\n   * Deletes an inbox message.\n   *\n   * @param messageId The id of the message to be deleted.\n   * @return A promise with the result.\n   */\n  static deleteInboxMessage(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.deleteInboxMessage(messageId)\n  }\n\n  /**\n   * Marks an inbox message as read.\n   *\n   * @param messageId The id of the message to be marked as read.\n   * @return A promise with the result.\n   */\n  static markInboxMessageRead(messageId: string): Promise<boolean> {\n    return UrbanAirshipModule.markInboxMessageRead(messageId)\n  }\n\n  /**\n   * Forces the inbox to refresh. This is normally not needed as the inbox will\n   * automatically refresh on foreground or when a push arrives that's associated\n   * with a message.\n   *\n   * @return{Promise.<boolean>} A promise with the result.\n   */\n  static refreshInbox(): Promise<boolean> {\n    return UrbanAirshipModule.refreshInbox()\n  }\n\n  /**\n   * Sets the default behavior when the message center is launched from a push\n   * notification. If set to false the message center must be manually launched.\n   *\n   * @param enabled true to automatically launch the default message center, false to disable.\n   */\n  static setAutoLaunchDefaultMessageCenter(enabled: boolean) {\n    UrbanAirshipModule.setAutoLaunchDefaultMessageCenter(enabled)\n  }\n\n  /**\n   * Overriding the locale.\n   *\n   * @param localeIdentifier The locale identifier.\n   */\n  static setCurrentLocale(localeIdentifier: String) {\n    UrbanAirshipModule.setCurrentLocale(localeIdentifier)\n  }\n\n  /**\n   * Getting the locale currently used by Airship.\n   *\n   */\n  static getCurrentLocale(): Promise<String> {\n    return UrbanAirshipModule.getCurrentLocale()\n  }\n\n  /**\n   * Resets the current locale.\n   *\n   */\n  static clearLocale() {\n    UrbanAirshipModule.clearLocale()\n  }\n\n  /**\n   * Gets all the active notifications for the application.\n   * Supported on Android Marshmallow (23)+ and iOS 10+.\n   *\n   * @return A promise with the result.\n   */\n  static getActiveNotifications(): Promise<PushPayload[]> {\n    return UrbanAirshipModule.getActiveNotifications()\n  }\n\n  /**\n   * Clears all notifications for the application.\n   * Supported on Android and iOS 10+. For older iOS devices, you can set\n   * the badge number to 0 to clear notifications.\n   */\n  static clearNotifications() {\n    UrbanAirshipModule.clearNotifications()\n  }\n\n  /**\n   * Clears a specific notification.\n   * Supported on Android and iOS 10+.\n   *\n   * @param identifier The notification identifier. The identifier will be\n   * available in the PushReceived event and in the active notification response\n   * under the \"notificationId\" field.\n   */\n  static clearNotification(identifier: string) {\n    UrbanAirshipModule.clearNotification(identifier)\n  }\n\n  /**\n   * Sets the in-app message display interval on the default display coordinator.\n   *\n   * @param seconds The minimum number of seconds between message displays.\n   */\n  static setInAppAutomationDisplayInterval(seconds: number) {\n    UrbanAirshipModule.setInAppAutomationDisplayInterval(seconds)\n  }\n\n  static displayPreferenceCenter(preferenceCenterId: String) {\n    UrbanAirshipModule.displayPreferenceCenter(preferenceCenterId);\n  }\n\n  static getPreferenceCenterConfig(preferenceCenterId: String): Promise<PreferenceCenter> {\n    return UrbanAirshipModule.getPreferenceCenterConfig(preferenceCenterId);\n  }\n\n  static setUseCustomPreferenceCenterUi(useCustomUi: boolean, preferenceCenterId: String) {\n    UrbanAirshipModule.setUseCustomPreferenceCenterUi(useCustomUi, preferenceCenterId);\n  }\n}\n"],"mappings":"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"}