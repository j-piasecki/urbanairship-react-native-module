{"version":3,"names":["ScopedSubscriptionListUpdateType","ScopedSubscriptionListEditor","constructor","onApply","subscriptionListUpdates","subscribe","subscriptionListId","scope","operation","push","unsubscribe","apply"],"sources":["ScopedSubscriptionListEditor.ts"],"sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\nimport { SubscriptionScope } from \"./UrbanAirship\";\n\n/**\n * Enum of internal scoped subscription list update type.\n * @hidden\n */\nenum ScopedSubscriptionListUpdateType {\n  subscribe = \"subscribe\",\n  unsubscribe = \"unsubscribe\"\n}\n\n/**\n * Scoped subscription list operation.\n * @hidden\n */\nexport interface ScopedSubscriptionListUpdate {\n  /**\n   * The subscription list identifier.\n   */\n  listId: string;\n  /**\n   * The subscription list update type.\n   */\n  type: ScopedSubscriptionListUpdateType;\n  /**\n   * The subscription scope to update.\n   */\n  scope: SubscriptionScope\n}\n\n/**\n * Scoped subscription list editor.\n */\nexport class ScopedSubscriptionListEditor {\n\n   onApply: (subscriptionListUpdates: ScopedSubscriptionListUpdate[]) => void;\n   subscriptionListUpdates: ScopedSubscriptionListUpdate[];\n\n  /**\n   */\n  constructor(onApply: (subscriptionListUpdates: ScopedSubscriptionListUpdate[]) => void) {\n    this.onApply = onApply;\n    this.subscriptionListUpdates = [];\n  }\n\n  /**\n   * Subscribes to a list in the given scope.\n   *\n   * @param subscriptionListId The subscription list identifier.\n   * @param scope The subscription scope to subscribe.\n   */\n  subscribe(subscriptionListId: string, scope: SubscriptionScope) {\n    const operation = {\"listId\": subscriptionListId, \"type\": ScopedSubscriptionListUpdateType.subscribe, \"scope\": scope};\n    this.subscriptionListUpdates.push(operation);\n    return this;\n  }\n\n  /**\n  * Unsubscribe from a list.\n  *\n  * @param subscriptionListId The subscription list identifier.\n  * @param scope The subscription scope to unsubscribe.\n  */\n  unsubscribe(subscriptionListId: string, scope: SubscriptionScope) {\n    const operation = {\"listId\": subscriptionListId, \"type\": ScopedSubscriptionListUpdateType.unsubscribe, \"scope\": scope};\n    this.subscriptionListUpdates.push(operation);\n    return this;\n  }\n\n  /**\n  * Applies subscription list changes.\n  *\n  */\n  apply() {\n    this.onApply(this.subscriptionListUpdates)\n  }\n}\n"],"mappings":"AAAA;;AAEA,YAAY;;AAAC;EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIb;AACA;AACA;AACA;AAHA,IAIKA,gCAAgC;AAKrC;AACA;AACA;AACA;AAHA,WALKA,gCAAgC;EAAhCA,gCAAgC;EAAhCA,gCAAgC;AAAA,GAAhCA,gCAAgC,KAAhCA,gCAAgC;AAwBrC;AACA;AACA;AACO,MAAMC,4BAA4B,CAAC;EAKxC;AACF;EACEC,WAAW,CAACC,OAA0E,EAAE;IAAA;IAAA;IACtF,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,uBAAuB,GAAG,EAAE;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,SAAS,CAACC,kBAA0B,EAAEC,KAAwB,EAAE;IAC9D,MAAMC,SAAS,GAAG;MAAC,QAAQ,EAAEF,kBAAkB;MAAE,MAAM,EAAEN,gCAAgC,CAACK,SAAS;MAAE,OAAO,EAAEE;IAAK,CAAC;IACpH,IAAI,CAACH,uBAAuB,CAACK,IAAI,CAACD,SAAS,CAAC;IAC5C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,WAAW,CAACJ,kBAA0B,EAAEC,KAAwB,EAAE;IAChE,MAAMC,SAAS,GAAG;MAAC,QAAQ,EAAEF,kBAAkB;MAAE,MAAM,EAAEN,gCAAgC,CAACU,WAAW;MAAE,OAAO,EAAEH;IAAK,CAAC;IACtH,IAAI,CAACH,uBAAuB,CAACK,IAAI,CAACD,SAAS,CAAC;IAC5C,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACEG,KAAK,GAAG;IACN,IAAI,CAACR,OAAO,CAAC,IAAI,CAACC,uBAAuB,CAAC;EAC5C;AACF;AAAC"}