{"version":3,"names":["ScopedSubscriptionListUpdateType","ScopedSubscriptionListEditor","constructor","onApply","subscriptionListUpdates","subscribe","subscriptionListId","scope","operation","push","unsubscribe","apply"],"sources":["ScopedSubscriptionListEditor.ts"],"sourcesContent":["/* Copyright Airship and Contributors */\n\n'use strict';\n\nimport { SubscriptionScope } from \"./UrbanAirship\";\n\n/**\n * Enum of internal scoped subscription list update type.\n * @hidden\n */\nenum ScopedSubscriptionListUpdateType {\n  subscribe = \"subscribe\",\n  unsubscribe = \"unsubscribe\"\n}\n\n/**\n * Scoped subscription list operation.\n * @hidden\n */\nexport interface ScopedSubscriptionListUpdate {\n  /**\n   * The subscription list identifier.\n   */\n  listId: string;\n  /**\n   * The subscription list update type.\n   */\n  type: ScopedSubscriptionListUpdateType;\n  /**\n   * The subscription scope to update.\n   */\n  scope: SubscriptionScope\n}\n\n/**\n * Scoped subscription list editor.\n */\nexport class ScopedSubscriptionListEditor {\n\n   onApply: (subscriptionListUpdates: ScopedSubscriptionListUpdate[]) => void;\n   subscriptionListUpdates: ScopedSubscriptionListUpdate[];\n\n  /**\n   */\n  constructor(onApply: (subscriptionListUpdates: ScopedSubscriptionListUpdate[]) => void) {\n    this.onApply = onApply;\n    this.subscriptionListUpdates = [];\n  }\n\n  /**\n   * Subscribes to a list in the given scope.\n   *\n   * @param subscriptionListId The subscription list identifier.\n   * @param scope The subscription scope to subscribe.\n   */\n  subscribe(subscriptionListId: string, scope: SubscriptionScope) {\n    const operation = {\"listId\": subscriptionListId, \"type\": ScopedSubscriptionListUpdateType.subscribe, \"scope\": scope};\n    this.subscriptionListUpdates.push(operation);\n    return this;\n  }\n\n  /**\n  * Unsubscribe from a list.\n  *\n  * @param subscriptionListId The subscription list identifier.\n  * @param scope The subscription scope to unsubscribe.\n  */\n  unsubscribe(subscriptionListId: string, scope: SubscriptionScope) {\n    const operation = {\"listId\": subscriptionListId, \"type\": ScopedSubscriptionListUpdateType.unsubscribe, \"scope\": scope};\n    this.subscriptionListUpdates.push(operation);\n    return this;\n  }\n\n  /**\n  * Applies subscription list changes.\n  *\n  */\n  apply() {\n    this.onApply(this.subscriptionListUpdates)\n  }\n}\n"],"mappings":"AAAA;AAEA;;;;;;;;;AAIA;AACA;AACA;AACA;IACKA,gC;AAKL;AACA;AACA;AACA;;WARKA,gC;EAAAA,gC;EAAAA,gC;GAAAA,gC,KAAAA,gC;;AAwBL;AACA;AACA;AACO,MAAMC,4BAAN,CAAmC;EAKxC;AACF;EACEC,WAAW,CAACC,OAAD,EAA6E;IAAA;;IAAA;;IACtF,KAAKA,OAAL,GAAeA,OAAf;IACA,KAAKC,uBAAL,GAA+B,EAA/B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,SAAS,CAACC,kBAAD,EAA6BC,KAA7B,EAAuD;IAC9D,MAAMC,SAAS,GAAG;MAAC,UAAUF,kBAAX;MAA+B,QAAQN,gCAAgC,CAACK,SAAxE;MAAmF,SAASE;IAA5F,CAAlB;IACA,KAAKH,uBAAL,CAA6BK,IAA7B,CAAkCD,SAAlC;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,WAAW,CAACJ,kBAAD,EAA6BC,KAA7B,EAAuD;IAChE,MAAMC,SAAS,GAAG;MAAC,UAAUF,kBAAX;MAA+B,QAAQN,gCAAgC,CAACU,WAAxE;MAAqF,SAASH;IAA9F,CAAlB;IACA,KAAKH,uBAAL,CAA6BK,IAA7B,CAAkCD,SAAlC;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;;;EACEG,KAAK,GAAG;IACN,KAAKR,OAAL,CAAa,KAAKC,uBAAlB;EACD;;AA1CuC"}